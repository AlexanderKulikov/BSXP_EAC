#Область СлужебныеПроцедурыИФункции

Функция ВерсияРасширения(Запрос)
	ТекущаяВерсия = ЕАС_ОбменСерверПовтИспКопируемый.ВерсияРасширения();
	Если ТекущаяВерсия = Неопределено Тогда
		Ответ = Новый HTTPСервисОтвет(404);
		Ответ.Причина = НСтр("ru = 'Расширение ЕАС не найдено.', en = 'Extension PFI is not found.'");
	Иначе	
		Ответ = Новый HTTPСервисОтвет(200);
		Ответ.УстановитьТелоИзСтроки(ТекущаяВерсия, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.Авто);
	КонецЕсли;	
	Возврат Ответ;                 
КонецФункции

Функция ПолучитьОтправитьИзменения(Запрос)
	Перем ТекстОшибки, ДанныеСообщения;
	
	Протокол = Новый ТекстовыйДокумент;
	СтруктураПротокол = ЕАС_ПротоколированиеКопируемый.НачатьФормированиеПротокола(Перечисления.ЕАС_ВидыПротоколовОбмена.Вручную, Протокол);
	
	Попытка
		// прочитать сообщение
		Тело = Запрос.ПолучитьТелоКакСтроку("UTF-8");     
		Если ЗначениеЗаполнено(Тело) Тогда
			ЕАС_ОбменВызовСервераКопируемый.ПрочитатьXMLСообщениеЕАС(Тело, ТекстОшибки, СтруктураПротокол, ДанныеСообщения);
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru='Ошибка обработки входящего сообщения ""%1"")'"), ТекстОшибки);
				Ответ = Новый HTTPСервисОтвет(400);
				Ответ.УстановитьТелоИзСтроки(ТекстОшибки);
			КонецЕсли;	
		Иначе	
			ТекстОшибки = НСтр("ru = 'Отсутствует входящее сообщение'");
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.УстановитьТелоИзСтроки(ТекстОшибки);
		КонецЕсли;	
		
		// сформировать сообщение
		Если Ответ = Неопределено Тогда
			УзелОбмена = ДанныеСообщения.УзелОбмена;
			Результат = ЕАС_ОбменВызовСервераКопируемый.СформироватьXMLСообщениеЕАС(УзелОбмена, ТекстОшибки, СтруктураПротокол); 
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru='Ошибка формирования исходящего сообщения ""%1"")'"), ТекстОшибки);
				Ответ = Новый HTTPСервисОтвет(400);
				Ответ.УстановитьТелоИзСтроки(ТекстОшибки);
			Иначе	
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.УстановитьТелоИзСтроки(Результат, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.Авто);
			КонецЕсли;	
		КонецЕсли;	
		
		ТекстПротокол = ?(Ответ.КодСостояния = 200, 
							НСтр("ru = 'Обмен закончен успешно'"),
							СтрШаблон(НСтр("ru = 'Обмен закончен с ошибкой %1'"), ТекстОшибки));
		
		ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстПротокол, 1);
		ЕАС_ПротоколированиеКопируемый.ЗакончитьФормированиеПротокола(СтруктураПротокол);
		
		Возврат Ответ;
	
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка обработки HTTP запроса %1'"), ОписаниеОшибки());
		ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстОшибки, 1);
		ЕАС_ПротоколированиеКопируемый.ЗакончитьФормированиеПротокола(СтруктураПротокол);
		
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки(ТекстОшибки);
		Возврат Ответ;
	КонецПопытки;
	
КонецФункции

Функция УзелСинхронизироватьПараметрыУзла(Запрос)
	Перем ТекстОшибки, ДанныеСообщения;
	
	Протокол = Новый ТекстовыйДокумент;
	СтруктураПротокол = ЕАС_ПротоколированиеКопируемый.НачатьФормированиеПротокола(Перечисления.ЕАС_ВидыПротоколовОбмена.Вручную, Протокол);
	
	Попытка
		// прочитать сообщение
		СтрокаJSON = Запрос.ПолучитьТелоКакСтроку("UTF-8");     
		Если ЗначениеЗаполнено(СтрокаJSON) Тогда
			
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
			СтруктураСообщения = ПрочитатьJSON(ЧтениеJSON, Истина);
			ЧтениеJSON.Закрыть();
			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ОбменЕАСБухгалтерия.Код
				|ИЗ
				|	ПланОбмена.ОбменЕАСБухгалтерия КАК ОбменЕАСБухгалтерия
				|ГДЕ
				|	ОбменЕАСБухгалтерия.ЭтотУзел
				|	И НЕ ОбменЕАСБухгалтерия.ПометкаУдаления";
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			Если РезультатЗапроса.Следующий() Тогда
				Если РезультатЗапроса.Код <> СтруктураСообщения.Получить("КодКорреспондента") Тогда
					ТекстОшибки = НСтр("ru = 'Код узла Корреспондента в ЕАС (%1) не совпадает с кодом Этого Узла (%2). Исправьте вручную.'");
					ТекстОшибки = СтрШаблон(ТекстОшибки, СтруктураСообщения.Получить("КодКорреспондента"), РезультатЗапроса.Код);
					ВызватьИсключение ТекстОшибки;
				КонецЕсли;	
			Иначе	
				ТекстОшибки = НСтр("ru = 'Не найден ЭтотУзел в плане обмена ""Обмен ЕАС Бухгалтерия"". Сообщите о Проблеме расширения ЕАС.'");
				ВызватьИсключение ТекстОшибки;
			КонецЕсли;
						
			//}}КОНСТРУКТОР_ЗАПРОСА_С_ОБРАБОТКОЙ_РЕЗУЛЬТАТА
			
			ТекущаяОбласть = ЕАС_ОбластиДанныхКопируемый.ОбластьДанныхДляОбъектов();
			
			// Ищем узел обмена с ЕАС в текущей области			
			Запрос = Новый Запрос;
			Запрос.Текст =
				"ВЫБРАТЬ
				|	ОбменЕАСБухгалтерия.Ссылка,
				|	ОбменЕАСБухгалтерия.Код
				|ИЗ
				|	ПланОбмена.ОбменЕАСБухгалтерия КАК ОбменЕАСБухгалтерия
				|ГДЕ
				|	ОбменЕАСБухгалтерия.ОбластьДанных = &ТекущаяОбласть
				|	И НЕ ОбменЕАСБухгалтерия.ЭтотУзел";
			
			Запрос.УстановитьПараметр("ТекущаяОбласть", ТекущаяОбласть);
			
			РезультатЗапроса = Запрос.Выполнить().Выбрать();
			Если РезультатЗапроса.Следующий() Тогда
				// Есть узел в области
				Если РезультатЗапроса.Код <> СтруктураСообщения.Получить("Код") Тогда
					ТекстОшибки = НСтр("ru = 'Код узла в ЕАС (%1) не совпадает с кодом узла (%2) в области данных (%3). Исправьте вручную.'");
					ТекстОшибки = СтрШаблон(ТекстОшибки, СтруктураСообщения.Получить("Код"), РезультатЗапроса.Код, ТекущаяОбласть);
					ВызватьИсключение ТекстОшибки;
				Иначе
					УзелОбъект = РезультатЗапроса.Ссылка.ПолучитьОбъект();
					//УзелОбъект.Код 				 = СтруктураСообщения.Получить("Код");
					УзелОбъект.Наименование 	 = СтруктураСообщения.Получить("Наименование");
					УзелОбъект.КодКорреспондента = СтруктураСообщения.Получить("ЕАС.Код");
					УзелОбъект.ОбластьДанныхКорреспондента = СтруктураСообщения.Получить("ОбластьДанных");
					УзелОбъект.РегистрироватьИзменения     = СтруктураСообщения.Получить("РегистрироватьИзменения");
					УзелОбъект.ЭтоТестоваяИБ      = СтруктураСообщения.Получить("ЭтоТестоваяИБ");
					УзелОбъект.НомерОтправленного = СтруктураСообщения.Получить("НомерПринятого");
					УзелОбъект.НомерПринятого     = СтруктураСообщения.Получить("НомерОтправленного");
					УзелОбъект.Записать();
					СтруктураПротокол.Вставить("УзелОбмена",        УзелОбъект.Ссылка);
					ТекстОответа = НСтр("ru = 'Synchronized'");
					Ответ = Новый HTTPСервисОтвет(200);
					Ответ.УстановитьТелоИзСтроки(ТекстОответа);
				КонецЕсли;	
			Иначе
				// Узла в области нет
				УзелОбъект = ПланыОбмена.ОбменЕАСБухгалтерия.СоздатьУзел();
				УзелОбъект.Код 				 = СтруктураСообщения.Получить("Код");				
				УзелОбъект.Наименование 	 = СтруктураСообщения.Получить("Наименование");	
				УзелОбъект.КодКорреспондента = СтруктураСообщения.Получить("ЕАС.Код");	
				УзелОбъект.ОбластьДанныхКорреспондента = СтруктураСообщения.Получить("ОбластьДанных"); 		
				УзелОбъект.РегистрироватьИзменения     = СтруктураСообщения.Получить("РегистрироватьИзменения");
				УзелОбъект.ЭтоТестоваяИБ      = СтруктураСообщения.Получить("ЭтоТестоваяИБ");
				//УзелОбъект.НомерОтправленного = СтруктураСообщения.Получить("НомерПринятого");
				//УзелОбъект.НомерПринятого     = СтруктураСообщения.Получить("НомерОтправленного");
				УзелОбъект.Записать();
				
				СтруктураПротокол.Вставить("УзелОбмена",        УзелОбъект.Ссылка);
				ТекстОответа = НСтр("ru = 'Created'");
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.УстановитьТелоИзСтроки(ТекстОответа);
			КонецЕсли;	 		
			
		Иначе	
			ТекстОшибки = НСтр("ru = 'Отсутствует входящее сообщение'");
			Ответ = Новый HTTPСервисОтвет(400);
			Ответ.УстановитьТелоИзСтроки(ТекстОшибки);
		КонецЕсли;	
		
		// сформировать сообщение
		Если Ответ = Неопределено Тогда
			УзелОбмена = ДанныеСообщения.УзелОбмена;
			Результат = ЕАС_ОбменВызовСервераКопируемый.СформироватьXMLСообщениеЕАС(УзелОбмена, ТекстОшибки, СтруктураПротокол); 
			Если ЗначениеЗаполнено(ТекстОшибки) Тогда
				ТекстОшибки = СтрШаблон(НСтр("ru='Ошибка формирования исходящего сообщения ""%1"")'"), ТекстОшибки);
				Ответ = Новый HTTPСервисОтвет(400);
				Ответ.УстановитьТелоИзСтроки(ТекстОшибки);
			Иначе	
				Ответ = Новый HTTPСервисОтвет(200);
				Ответ.УстановитьТелоИзСтроки(Результат, КодировкаТекста.UTF8, ИспользованиеByteOrderMark.Авто);
			КонецЕсли;	
		КонецЕсли;	
		
		ТекстПротокол = ?(Ответ.КодСостояния = 200, 
							НСтр("ru = 'Обмен закончен успешно'"),
							СтрШаблон(НСтр("ru = 'Обмен закончен с ошибкой %1'"), ТекстОшибки));
		
		ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстПротокол, 1);
		ЕАС_ПротоколированиеКопируемый.ЗакончитьФормированиеПротокола(СтруктураПротокол);
		
		Возврат Ответ;
	
	Исключение
		ТекстОшибки = СтрШаблон(НСтр("ru = 'Ошибка обработки HTTP запроса %1'"), ОписаниеОшибки());
		ЕАС_ПротоколированиеКопируемый.СообщениеВПротокол(СтруктураПротокол, ТекстОшибки, 1);
		ЕАС_ПротоколированиеКопируемый.ЗакончитьФормированиеПротокола(СтруктураПротокол);
		
		Ответ = Новый HTTPСервисОтвет(400);
		Ответ.УстановитьТелоИзСтроки(ТекстОшибки);
		Возврат Ответ;
	КонецПопытки;
	
КонецФункции

#КонецОбласти


