&Вместо("ПолучитьДанныеИзФайла")
Процедура Расш_ПолучитьДанныеИзФайла() Экспорт
	Если ПланыОбмена.ГлавныйУзел() <> Неопределено Тогда


		Возврат;
	КонецЕсли;


	ВидОтчета = Обработки.ВыгрузкаДанных.ВидОтчетаСтруктура();

	ПапкаНазначения = КаталогВременныхФайлов();
	Сейчас = ТекущаяДата();

	ПапкаДанных = ПапкаНазначения + "\ДвоичныеДанные.zip";
	ДвоичныеДанные = ПолучитьМакет("АрхивДанных");
	ДвоичныеДанные.Записать(ПапкаДанных);

	ОчиститьКаталог(КаталогВременныхФайлов() + "Выгрузка\");
	ПапкаНазначения = КаталогВременныхФайлов() + "Выгрузка\";

	ЧтениеZIP = Новый ЧтениеZipФайла(ПапкаДанных);
	ЧтениеZIP.ИзвлечьВсе(ПапкаНазначения);


	Маска = "*.txt";
	НайденныеФайлыТХТ = НайтиФайлы(ПапкаНазначения, Маска);
	Маска = "*.mxl";
	НайденныеФайлыMXL = НайтиФайлы(ПапкаНазначения, Маска);



	ВидДеятельностиОсновной = ВидДеятельностиСтруктура();
	ВидДеятельностиНомер = ВидДеятельностиСтруктураНомер();

	Для каждого ВидДеятельностиР Из ВидДеятельностиОсновной Цикл
		Маска = "InfoForm_" + ВидДеятельностиР + "*.txt";
		ИмяИнфоТХТ = НайтиФайлы(ПапкаНазначения, Маска);

		Если ИмяИнфоТХТ.Количество() <> 0 Тогда
			Для каждого Элемент Из ИмяИнфоТХТ Цикл
				Сообщение = Новый СообщениеПользователю;
				СписокСообщений = Новый СписокЗначений;

				Если Элемент.Имя <> "" Тогда
					Сейчас = ТекущаяДата();
					ФайлИнфо = Новый ТекстовыйДокумент;
					ФайлИнфо.Прочитать(ПапкаНазначения + Элемент.Имя, "windows-1251");

					ВерсияМоделиКонфигурации = ФайлИнфо.ПолучитьСтроку(1);
					Версия = Лев(ВерсияМоделиКонфигурации, Найти(ВерсияМоделиКонфигурации, "*") - 1);

					Период = ФайлИнфо.ПолучитьСтроку(2);
					ВидДеятельности = ФайлИнфо.ПолучитьСтроку(3);

					ДатаНачала = ПолучитьДатуНачалаГод(Период);
					ДатаОкончания = ПолучитьДатуКонцаПериода(Период);
					Периодичность = ПолучитьПериодичность(Период);
					ДатаИзменения = ФайлИнфо.ПолучитьСтроку(4);


					СоздатьМассивыРабочие(ФайлИнфо);

				КонецЕсли;
			КонецЦикла;

			ОсновныеДействияФормыЗагрузитьОтчетыИзАрхива();

		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


&Вместо("ВидДеятельностиСтруктура")
Функция Расш_ВидДеятельностиСтруктура() Экспорт
	ВидДеятельностиОсновной = Новый Массив;
	ВидДеятельностиОсновной.Добавить("CX");
	ВидДеятельностиОсновной.Добавить("PR");
	ВидДеятельностиОсновной.Добавить("OB");
	ВидДеятельностиОсновной.Добавить("PK");
	ВидДеятельностиОсновной.Добавить("KK");
	ВидДеятельностиОсновной.Добавить("KFX");
	ВидДеятельностиОсновной.Добавить("IP");

	Возврат ВидДеятельностиОсновной;

КонецФункции



&Вместо("СоздатьПериоды")
Процедура Расш_СоздатьПериоды(Родитель, Период) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Периоды.Ссылка,
	|	Периоды.Наименование
	|ИЗ
	|	Справочник.Периоды КАК Периоды
	|ГДЕ
	|	Периоды.ДатаОкончания = &ДатаОкончания
	|	И Периоды.Периодичность = &Периодичность";


	Запрос.УстановитьПараметр("ДатаОкончания", ПолучитьДатуКонцаГод(Период));
	Запрос.УстановитьПараметр("Периодичность", Перечисления.Периодичность.Год);

	Результат = Запрос.Выполнить();



	Если Результат.Пустой() Тогда
		Спр = Справочники.Периоды;
		НовЭлР = Спр.СоздатьЭлемент();
		НовЭлР.Наименование1 = ПолучитьГод(Период);
		НовЭлР.ДатаНачала = ПолучитьДатуНачалаГод(Период);
		НовЭлР.ДатаОкончания = ПолучитьДатуКонцаГод(Период);
		НовЭлР.Наименование = "Год_" + ПолучитьГод(Период);
		НовЭлР.Периодичность = Перечисления.Периодичность.Год;
		НовЭлР.Закрыт = Ложь;
		НовЭлР.Записать();

		Если ПолучитьПериод(Период) <> "Год" Тогда
			НовЭл = Спр.СоздатьЭлемент();
			НовЭл.Родитель = НовЭлР.Ссылка;
			НовЭл.Наименование1 = ПолучитьПериод(Период);
			НовЭл.ДатаНачала = ПолучитьДатуНачалаГод(Период);
			НовЭл.ДатаОкончания = ПолучитьДатуКонцаПериода(Период);
			НовЭл.Периодичность = ПолучитьПериодичность(Период);
			НовЭл.Наименование = ПолучитьПериодГод(Период);
			НовЭл.Закрыт = Ложь;
			НовЭл.Записать();
		КонецЕсли;
	Иначе
		Выборка = Результат.Выбрать();

		Если Выборка.Следующий() Тогда
			ВыборкаСсылка = Выборка.Ссылка;
			Объект = ВыборкаСсылка.ПолучитьОбъект();
		КонецЕсли;

		Если ПолучитьПериод(Период) <> "Год" Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|Периоды.Ссылка,
			|Периоды.Наименование
			|ИЗ
			|	Справочник.Периоды КАК Периоды
			|ГДЕ
			|	 Периоды.ДатаОкончания = &ДатаОкончания 
			|	И Периоды.Родитель = &Ссылка 
			|	И Периоды.Периодичность=(&Периодичность)";
			Запрос.УстановитьПараметр("Ссылка", ВыборкаСсылка);
			Запрос.УстановитьПараметр("ДатаОкончания", ПолучитьДатуКонцаПериода(Период));
			Запрос.УстановитьПараметр("Периодичность", ПолучитьПериодичность(Период));
			Результат = Запрос.Выполнить();

			Если Результат.Пустой() Тогда
				Спр = Справочники.Периоды;
				НовЭл = Спр.СоздатьЭлемент();
				НовЭл.Родитель = ВыборкаСсылка;
				НовЭл.Наименование1 = ПолучитьПериод(Период);
				НовЭл.ДатаНачала = ПолучитьДатуНачалаГод(Период);
				НовЭл.ДатаОкончания = ПолучитьДатуКонцаПериода(Период);
				НовЭл.Периодичность = ПолучитьПериодичность(Период);
				НовЭл.Наименование = ПолучитьПериодГод(Период);
				НовЭл.Закрыт = Ложь;
				НовЭл.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


&Вместо("Записать_ВСправочник")
Процедура Расш_Записать_ВСправочник(НовЭл, Элемент, ВидДеятельности, Период) Экспорт
	ВидОтчета = Обработки.ВыгрузкаДанных.ВидОтчетаСтруктура();
	Для каждого КлючЗначение Из ВидОтчета Цикл
		Если КлючЗначение.Значение = Элемент.ИмяБезРасширения Тогда
			ФайлФормы = КлючЗначение.Ключ;
		КонецЕсли;
	КонецЦикла;

	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Прочитать(Элемент.ПолноеИмя);
	ТабДок.НайтиЗначение(Элемент.ПолноеИмя);
	Шаблон = Новый ХранилищеЗначения(ТабДок);
	Если Шаблон <> Неопределено Тогда
		ПолеТабличногоДокумента.Очистить();
		ПолеТабличногоДокумента.Вывести(Шаблон.Получить());
	Иначе
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	НовЭл.Наименование = ФайлФормы;
	НовЭл.Период = Справочники.Периоды.НайтиПоНаименованию(Период).Ссылка;
	НовЭл.ВидДеятельности = ВидДеятельности;
	НовЭл.Шаблон = Шаблон;
	НовЭл.Записать();
КонецПроцедуры

&Вместо("ОсновныеДействияФормыЗагрузитьОтчетыИзАрхива")
Процедура Расш_ОсновныеДействияФормыЗагрузитьОтчетыИзАрхива()
	Перем РабочийПериод;
	УстановитьПривилегированныйРежим(Истина);

	Константы.MSВерсияМоделиМСХ.Установить(Версия);
	Константы.ТекущийПериод.Установить(ПолучитьПериод(Период) + "_" + ПолучитьГод(Период));

	УстановитьПривилегированныйРежим(Ложь);

	ВыполнитьВнешниеОбработки();

	ЗаписатьПериод(Период);
	Период = ПолучитьПериодГод(Период);
	РабочийПериод = Справочники.Периоды.НайтиПоНаименованию(Период);

	ОчиститьПравилаПроверкиЗаПериод(РабочийПериод, ВидДеятельности);

	Для каждого Элемент Из НайденныеФайлыТХТ Цикл
		ТекИмя = Элемент.Имя;
		Если ПустаяСтрока(ТекИмя) Тогда

			Возврат;
		КонецЕсли;

		Если ТекИмя = "Control.txt" Или ТекИмя = "Control Stop.txt" Тогда
			ТекущееПравилоПроверки(ТекИмя, РабочийПериод);
		КонецЕсли;
	КонецЦикла;



	ЗагрузитьОтчетыИзАрхива();

КонецПроцедуры





&Вместо("ТекущееПравилоПроверки")
Процедура Расш_ТекущееПравилоПроверки(ИмяФайла, РабочийПериод)
	НовЭлСогласований = Справочники.Согласований.СоздатьЭлемент();
	НовЭлСогласований.ДатаИзменения = ДатаИзменения;
	НовЭлСогласований.Период = РабочийПериод;

	Если ИмяФайла = "Control Stop.txt" Тогда
		НовЭлСогласований.Наименование = "Блокирующие проверки";
		НовЭлСогласований.Блокирующий = Истина;
	Иначе
		НовЭлСогласований.Наименование = "Основная схема проверки";
		НовЭлСогласований.Блокирующий = Ложь;
	КонецЕсли;

	НовЭлСогласований.ВидДеятельности = ВидДеятельности;
	НовЭлСогласований.Записать();

	ТаблицаВидовФорм = Новый ТаблицаЗначений;
	ТаблицаВидовФорм.Колонки.Добавить("ФайлФормы");
	ТаблицаВидовФорм.Колонки.Добавить("СписокФорм");
	СписокФорм = "";

	Файл = Новый ТекстовыйДокумент;
	Файл.Прочитать(ПапкаНазначения + ИмяФайла, "windows-1251");
	КолСтрокПроверки = Файл.КоличествоСтрок();

	Для Сч = 1 По КолСтрокПроверки Цикл
		ТекСтр = Файл.ПолучитьСтроку(Сч);


		Если Лев(ТекСтр, 2) <> "IF" Тогда

			Если Найти(ТекСтр, ";;") Или Найти(ТекСтр, ";" + ВидДеятельностиНомер[СокрЛП(ВидДеятельности)] + ";") Тогда

				ТекСтр = СтрЗаменить(СокрЛ(ТекСтр), ";;", "");
				ТекСтр = СтрЗаменить(СокрЛ(ТекСтр), ";" + ВидДеятельностиНомер[СокрЛП(ВидДеятельности)] + ";", "");

				ТекКомментарий = ПолучитьКомментарийИзСтроки(ТекСтр);

				ТекЛевФорма = СтрЗаменить(СокрЛ(ТекСтр), "[", "");
				ТекЛевФорма = СтрЗаменить(СокрЛ(ТекЛевФорма), "Mod(", "");

				ТекЛевФорма = СтрЗаменить(СокрЛ(ТекЛевФорма), "Окр(", "");
				ТекЛевФорма = СтрЗаменить(СокрЛ(ТекЛевФорма), "(", "");

				ТекИмяФормы = Сред(ТекЛевФорма, 1, Найти(ТекЛевФорма, "_") - 1);
				ТекПравФорма = ТекЛевФорма;
				ТекПравФорма = СтрЗаменить(СокрЛ(ТекПравФорма), "Mod(", "");
				ТекПравФорма = СтрЗаменить(СокрЛ(ТекПравФорма), "[", "");

				ТекПравФорма = СтрЗаменить(СокрЛ(ТекПравФорма), "Окр(", "");
				ТекПравФорма = СтрЗаменить(СокрЛ(ТекПравФорма), "(", "");

				ПозПравФормы = Найти(ТекПравФорма, "Ф");

				Пока ПозПравФормы <> 0 Цикл
					ЧастьДоПозПравФормы = Сред(ТекПравФорма, 1, ПозПравФормы - 1);
					ТекПравФорма = СтрЗаменить(ТекПравФорма, ЧастьДоПозПравФормы, "");

					ТекСписокФорм = Сред(ТекПравФорма, 1, Найти(ТекПравФорма, "_") - 1);
					СписокФорм = ТекСписокФорм;

					НоваяСтрТаб = ТаблицаВидовФорм.Добавить();
					НоваяСтрТаб.ФайлФормы = ТекИмяФормы;
					НоваяСтрТаб.СписокФорм = СписокФорм;


					ТекПравФорма = СтрЗаменить(СокрЛП(ТекПравФорма), СписокФорм, "");
					ПозПравФормы = Найти(ТекПравФорма, "Ф");
				КонецЦикла;

				НовСтрока = НовЭлСогласований.ПравилоПроверки.Добавить();
				НовСтрока.КонтрСоотношения = ТекСтр;
				ТекСтрСтруктура = СтрЗаменить(СокрЛ(ТекСтр), "[", "");
				ТекСтрСтруктура = СтрЗаменить(СокрЛ(ТекСтрСтруктура), "Mod(", "");

				ТекСтрСтруктура = СтрЗаменить(СокрЛ(ТекСтрСтруктура), "Окр(", "");
				ТекСтрСтруктура = СтрЗаменить(СокрЛ(ТекСтрСтруктура), "(", "");

				ТекСтрСтруктура = Сред(ТекСтрСтруктура, 1, Найти(ТекСтрСтруктура, "_") - 1);

				НовСтрока.ФайлФормы = ТекСтрСтруктура;

				ТекСтрСтруктура = СтрЗаменить(СокрЛ(ТекСтр), "Mod([", "Показатели.");
				ТекСтрСтруктура = СтрЗаменить(СокрЛ(ТекСтрСтруктура), "])", "");

				ТекСтрСтруктура = СтрЗаменить(СокрЛ(ТекСтр), "[", "Показатели.");
				ТекСтрСтруктура = СтрЗаменить(СокрЛ(ТекСтрСтруктура), "]", "");

				НовСтрока.КонтрСоотношенияСтруктура = ТекСтрСтруктура;

				НовСтрока.Комментарий = ТекКомментарий;

			КонецЕсли;

		ИначеЕсли Лев(ТекСтр, 2) = "IF" Тогда

			Если Найти(ТекСтр, ";;") Или Найти(ТекСтр, ";" + ВидДеятельностиНомер[СокрЛП(ВидДеятельности)] + ";") Тогда

				ТекСтр = СтрЗаменить(СокрЛ(ТекСтр), ";;", "");
				ТекСтр = СтрЗаменить(СокрЛ(ТекСтр), ";" + ВидДеятельностиНомер[СокрЛП(ВидДеятельности)] + ";", "");

				ТекКомментарий = ПолучитьКомментарийИзСтроки(ТекСтр);

				ТекЛевФорма = СтрЗаменить(СокрЛ(ТекСтр), "[", "");
				ТекЛевФорма = СтрЗаменить(СокрЛ(ТекЛевФорма), "Mod(", "");

				ТекЛевФорма = СтрЗаменить(СокрЛ(ТекЛевФорма), "Окр(", "");
				ТекЛевФорма = СтрЗаменить(СокрЛ(ТекЛевФорма), "(", "");

				ТекИмяФормы = Сред(ТекЛевФорма, 1, Найти(ТекЛевФорма, "_") - 1);
				ТекИмяФормы = СтрЗаменить(ТекИмяФормы, "IF", "");
				ТекПравФорма = ТекЛевФорма;
				ТекПравФорма = СтрЗаменить(СокрЛ(ТекПравФорма), "Mod(", "");
				ТекПравФорма = СтрЗаменить(СокрЛ(ТекПравФорма), "[", "");

				ТекПравФорма = СтрЗаменить(СокрЛ(ТекПравФорма), "Окр(", "");
				ТекПравФорма = СтрЗаменить(СокрЛ(ТекПравФорма), "(", "");

				ПозПравФормы = Найти(ТекПравФорма, "Ф");

				Пока ПозПравФормы <> 0 Цикл
					ЧастьДоПозПравФормы = Сред(ТекПравФорма, 1, ПозПравФормы - 1);
					ТекПравФорма = СтрЗаменить(ТекПравФорма, ЧастьДоПозПравФормы, "");

					ТекСписокФорм = Сред(ТекПравФорма, 1, Найти(ТекПравФорма, "_") - 1);
					СписокФорм = ТекСписокФорм;

					НоваяСтрТаб = ТаблицаВидовФорм.Добавить();
					НоваяСтрТаб.ФайлФормы = ТекИмяФормы;
					НоваяСтрТаб.СписокФорм = СписокФорм;


					ТекПравФорма = СтрЗаменить(СокрЛП(ТекПравФорма), СписокФорм, "");
					ПозПравФормы = Найти(ТекПравФорма, "Ф");
				КонецЦикла;

				НовСтрока = НовЭлСогласований.ДвухуровневыеПравилаПроверки.Добавить();

				ТекСтр = СтрЗаменить(ТекСтр, "IF", "");
				ПозОкончанияУсловия = Найти(ТекСтр, "THEN") - 1;
				СтрУсловие = Лев(ТекСтр, ПозОкончанияУсловия);
				НовСтрока.КонтрСоотношенияУр1 = СтрУсловие;
				СтрУсловиеСтруктура = СтрЗаменить(СокрЛ(СтрУсловие), "[", "");
				СтрУсловиеСтруктура = СтрЗаменить(СокрЛ(СтрУсловиеСтруктура), "Mod(", "");

				СтрУсловиеСтруктура = СтрЗаменить(СокрЛ(СтрУсловиеСтруктура), "Окр(", "");
				СтрУсловиеСтруктура = СтрЗаменить(СокрЛ(СтрУсловиеСтруктура), "(", "");

				СтрУсловиеСтруктура = Сред(СтрУсловиеСтруктура, 1, Найти(СтрУсловиеСтруктура, "_") - 1);

				НовСтрока.ФайлФормы = СтрУсловиеСтруктура;

				СтрУсловиеСтруктура = СтрЗаменить(СокрЛ(СтрУсловие), "Mod([", "Показатели.");
				СтрУсловиеСтруктура = СтрЗаменить(СокрЛ(СтрУсловиеСтруктура), "])", "");

				СтрУсловиеСтруктура = СтрЗаменить(СокрЛ(СтрУсловие), "[", "Показатели.");
				СтрУсловиеСтруктура = СтрЗаменить(СокрЛ(СтрУсловиеСтруктура), "]", "");

				НовСтрока.КонтрСоотношенияСтруктураУр1 = СтрУсловиеСтруктура;


				СтрКС = СтрЗаменить(ТекСтр, СтрУсловие, "");
				СтрКС = СтрЗаменить(СтрКС, "THEN", "");
				НовСтрока.КонтрСоотношенияУр2 = СтрКС;
				СтрКССтруктура = СтрЗаменить(СокрЛ(СтрКС), "[", "");
				СтрКССтруктура = СтрЗаменить(СокрЛ(СтрКССтруктура), "Mod(", "");
				СтрКССтруктура = Сред(СтрКССтруктура, 1, Найти(СтрКССтруктура, "_") - 1);

				СтрКССтруктура = СтрЗаменить(СокрЛ(СтрКС), "Mod([", "Показатели.");
				СтрКССтруктура = СтрЗаменить(СокрЛ(СтрКССтруктура), "])", "");

				СтрКССтруктура = СтрЗаменить(СокрЛ(СтрКС), "[", "Показатели.");
				СтрКССтруктура = СтрЗаменить(СокрЛ(СтрКССтруктура), "]", "");

				НовСтрока.КонтрСоотношенияСтруктураУр2 = СтрКССтруктура;

				НовСтрока.Комментарий = ТекКомментарий;

			КонецЕсли;

		КонецЕсли;
	КонецЦикла;
	НовЭлСогласований.Записать();

	ТаблицаВидовФорм.Свернуть("ФайлФормы,СписокФорм");

	Для каждого СтрокаТаб Из ТаблицаВидовФорм Цикл
		НовСтрока = НовЭлСогласований.СвязьФорм.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаТаб);
	КонецЦикла;

	НовЭлСогласований.Записать();



КонецПроцедуры





&Вместо("ЗагрузитьОтчетыИзАрхива")
Процедура Расш_ЗагрузитьОтчетыИзАрхива()
	Для каждого Элемент Из НайденныеФайлыMXL Цикл

		Если СписокMXL.Найти(Элемент.Имя) <> Неопределено Тогда
			ФормаMXL = Элемент.Имя;

			Для каждого КлючЗначение Из ВидОтчета Цикл
				Если КлючЗначение.Значение = Элемент.ИмяБезРасширения Тогда
					ФайлФормы = КлючЗначение.Ключ;
				КонецЕсли;
			КонецЦикла;

			Спр = Справочники.ШаблоныФорм;
			ВидОтчета = Обработки.ВыгрузкаДанных.ВидОтчетаСтруктура();
			Для каждого КлючЗначение Из ВидОтчета Цикл
				Если КлючЗначение.Значение = Элемент.ИмяБезРасширения Тогда
					ФайлФормы = КлючЗначение.Ключ;
				КонецЕсли;
			КонецЦикла;


			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ
			|	ШаблоныФорм.Ссылка,
			|	ШаблоныФорм.ВидДеятельности,
			|	ШаблоныФорм.Наименование,
			|	ШаблоныФорм.Период.Ссылка
			|ИЗ
			|	Справочник.ШаблоныФорм КАК ШаблоныФорм
			|ГДЕ
			|	ШаблоныФорм.Период.Ссылка = &Ссылка
			|	И ШаблоныФорм.ВидДеятельности = &ВидДеятельности
			|	И ШаблоныФорм.Наименование = &Наименование";


			Запрос.УстановитьПараметр("ВидДеятельности", ВидДеятельности);
			Запрос.УстановитьПараметр("Наименование", ФайлФормы);
			Запрос.УстановитьПараметр("Ссылка", Справочники.Периоды.НайтиПоНаименованию(Период).Ссылка);

			Результат = Запрос.Выполнить();

			Если Результат.Пустой() Тогда

				НовЭл = Спр.СоздатьЭлемент();
				Записать_ВСправочник(НовЭл, Элемент, ВидДеятельности, Период);
				Найти_В_ТекстовомФайлеЗаписатьДок(ФайлИнфо, Элемент, НовЭл, ВидДеятельности, Период, СписокДоп, НайденныеФайлыТХТ, ПапкаНазначения);
			Иначе




				Выборка = Результат.Выбрать();

				Если Выборка.Следующий() Тогда

					НовЭл = Выборка.Ссылка;
					Объект = НовЭл.ПолучитьОбъект();
					Объект.Шаблон = Неопределено;

					Объект.Записать();

					ТабДок = Новый ТабличныйДокумент;
					ТабДок.Прочитать(Элемент.ПолноеИмя);
					ТабДок.НайтиЗначение(Элемент.ПолноеИмя);
					Шаблон = Новый ХранилищеЗначения(ТабДок);
					Если Шаблон <> Неопределено Тогда
						ПолеТабличногоДокумента.Очистить();
						ПолеТабличногоДокумента.Вывести(Шаблон.Получить());
						Объект.Шаблон = Шаблон;
						Объект.Записать();
					Иначе
						Отказ = Истина;
						Возврат;
					КонецЕсли;

					Найти_В_ТекстовомФайлеЗаписатьДок(ФайлИнфо, Элемент, Объект, ВидДеятельности, Период, СписокДоп, НайденныеФайлыТХТ, ПапкаНазначения);

				КонецЕсли;

			КонецЕсли;

		КонецЕсли;
	КонецЦикла;



	Для каждого Элемент Из НайденныеФайлыТХТ Цикл
		ТекИмя = Элемент.Имя;
		Если СписокTXT.Найти(ТекИмя) <> Неопределено Тогда

			Файл = Новый ТекстовыйДокумент;
			Файл.Прочитать(ПапкаНазначения + ТекИмя, "windows-1251");

			Для каждого КлючЗначение Из ВидОтчета Цикл
				Если КлючЗначение.Значение = Элемент.ИмяБезРасширения Тогда
					ФайлФормы = КлючЗначение.Ключ;
				КонецЕсли;
			КонецЦикла;

			Стр = "";
			Для Сч = 0 По Файл.КоличествоСтрок() Цикл
				Стр = Стр + Файл.ПолучитьСтроку(Сч);
			КонецЦикла;

			Выборка = Справочники.ШаблоныФорм.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.Наименование = ФайлФормы И Выборка.Период.Ссылка = Справочники.Периоды.НайтиПоНаименованию(Период).Ссылка И Выборка.ВидДеятельности = ВидДеятельности Тогда



					НовЭл = Выборка.Ссылка;

					Объект = НовЭл.ПолучитьОбъект();
					Объект.ПроцедураВычисления = Стр;
					Объект.ОбменДанными.Загрузка = Истина;
					Объект.Записать();

					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;


	ТекИмяEPF = Сред(СокрЛП(ФайлИнфо.ПолучитьСтроку(7)), 1, Найти(СокрЛП(ФайлИнфо.ПолучитьСтроку(7)), ";") - 1);
	Если ТекИмяEPF <> "" Тогда
		Обработка = ВнешниеОбработки.Создать(ПапкаНазначения + ТекИмяEPF);
		Обработка.ВыполнитьОбработку();
	КонецЕсли;


	ТекИмяHTM = Сред(СокрЛП(ФайлИнфо.ПолучитьСтроку(8)), 1, Найти(СокрЛП(ФайлИнфо.ПолучитьСтроку(8)), ";") - 1);
	Если ТекИмяHTM <> "" Тогда

		ИмяФайла = ПапкаНазначения + ТекИмяHTM;
		Объект = Новый ИзвлечениеТекста(ИмяФайла);
		Текст = Объект.ПолучитьТекст();

		Если Текст <> "" Тогда
			ЗапуститьПриложение(Объект.ИмяФайла);
		КонецЕсли;
	КонецЕсли;




КонецПроцедуры





&Вместо("ВыполнитьВнешниеОбработки")
Процедура Расш_ВыполнитьВнешниеОбработки()
	Перем ТекИмяEPF;
	ТекИмяEPF = Сред(СокрЛП(ФайлИнфо.ПолучитьСтроку(5)), 1, Найти(СокрЛП(ФайлИнфо.ПолучитьСтроку(5)), ";") - 1);
	Если ТекИмяEPF <> "" Тогда
		Маска = "*.epf";
		НайденныеФайлыEPF = НайтиФайлы(ПапкаНазначения, Маска);
		Если НайденныеФайлыEPF.Количество() <> 0 Тогда






			ВыполнитьОбработкуExternalDataPr1();
		КонецЕсли;
	КонецЕсли;


	ТекИмяEPF = Сред(СокрЛП(ФайлИнфо.ПолучитьСтроку(6)), 1, Найти(СокрЛП(ФайлИнфо.ПолучитьСтроку(6)), ";") - 1);
	Если ТекИмяEPF <> "" Тогда
		Маска = "*.epf";
		НайденныеФайлыEPF = НайтиФайлы(ПапкаНазначения, Маска);
		Если НайденныеФайлыEPF.Количество() <> 0 Тогда






			ВыполнитьОбработкуExternalDataPr2();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры


&Вместо("ВыполнитьОбработкуExternalDataPr1")
Процедура Расш_ВыполнитьОбработкуExternalDataPr1()
	Перем Период1;
	Период1 = НайтиПериод2019();
	Если ЗначениеЗаполнено(Период) Тогда

		ДобавитьПоказатель(Период, "Форма14АПК", "стр141225п1_гр3");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр141225п1_гр4");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр141225п1_гр5");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр141225п1_гр6");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр141225п1_гр7");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр141225п1_гр8");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр141225п1_гр9");

		ДобавитьПоказатель(Период, "Форма14АПК", "стр142225п1_гр3");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр142225п1_гр3п1");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр142225п1_гр4");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр142225п1_гр5");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр142225п1_гр6");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр142225п1_гр7");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр142225п1_гр8");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр142225п1_гр9п1");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр142225п1_гр9п2");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр142225п1_гр9");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр142225п1_гр10");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр142225п1_гр11");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр142225п1_гр12");


		ДобавитьПоказатель(Период, "Форма14АПК", "стр143225п1_гр3");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр143225п1_гр4");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр143225п1_гр5");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр143225п1_гр6");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр143225п1_гр7");

		ДобавитьПоказатель(Период, "Форма14АПК", "стр143119_гр3");
		ДобавитьПоказатель(Период, "Форма14АПК", "стр143119_гр5");



	КонецЕсли;

КонецПроцедуры


&Вместо("ВыполнитьОбработкуExternalDataPr2")
Процедура Расш_ВыполнитьОбработкуExternalDataPr2()
КонецПроцедуры

