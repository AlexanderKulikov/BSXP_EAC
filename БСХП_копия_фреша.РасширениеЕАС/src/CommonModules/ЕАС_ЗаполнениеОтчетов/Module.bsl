#Область ПрограммныйИнтерфейс

Функция ЗначениеПараметраЗаполнения(Объект, ИмяПараметра) Экспорт
	ПараметрыЗаполненияСтроки = Объект.ПараметрыЗаполнения.НайтиСтроки(Новый Структура("Имя", ИмяПараметра));
	Если ПараметрыЗаполненияСтроки.Количество() > 0 Тогда
		ПараметрЗаполнения = ПараметрыЗаполненияСтроки[0];
		Если Не ПустаяСтрока(ПараметрЗаполнения.Значение) Тогда
			СохраненноеЗначение = ЗначениеИзСтрокиВнутр(ПараметрЗаполнения.Значение);
			Если ПараметрЗаполнения.Список И ТипЗнч(СохраненноеЗначение) = Тип("СписокЗначений") Тогда
				Возврат СохраненноеЗначение.ВыгрузитьЗначения();
			Иначе	
				Возврат СохраненноеЗначение;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;	
КонецФункции

Функция УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, Знач РезультатВычисления, Суммировать = Ложь) Экспорт
	СтрокиТаблицы = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
	
	Если СтрокиТаблицы.Количество() > 0 Тогда
		СтрокаТаблицы = СтрокиТаблицы[0];
	Иначе
		СтрокаТаблицы = НачальнаяТаблица.Добавить(); 
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураСтроки);
	КонецЕсли;	
	Если ТипЗнч(РезультатВычисления) <> Тип("Число") Тогда
		РезультатВычисления = 0;
	КонецЕсли;	
	СтрокаТаблицы.РезультатВычисления = ?(Суммировать, СтрокаТаблицы.РезультатВычисления + РезультатВычисления, РезультатВычисления);  
	Возврат СтрокаТаблицы; 
КонецФункции

Процедура ФорматированиеЗначенийВычислений(ТаблицаРасчетов, СтруктураСтроки, ВыборкаПолейШаблона) Экспорт
	
	СтрокиПолей = Новый Соответствие;
	СсылкиПолей = Новый Массив;
	Для НомерСтроки = 0 По ТаблицаРасчетов.Количество() - 1 Цикл
		СтрокаРасчетов = ТаблицаРасчетов[НомерСтроки];
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, СтрокаРасчетов);
		ВыборкаПолейШаблона.Сбросить();
		Если ВыборкаПолейШаблона.НайтиСледующий(СтруктураСтроки) Тогда
			СсылкиПолей.Добавить(ВыборкаПолейШаблона.Ссылка);
			СтрокиПолей.Вставить(ВыборкаПолейШаблона.Ссылка, НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоляФормШаблонов.ТочностьЧисла КАК ТочностьЧисла,
		|	ПоляФормШаблонов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ЕАС_ПоляФормШаблонов КАК ПоляФормШаблонов
		|ГДЕ
		|	ПоляФормШаблонов.Ссылка В(&Ссылки)";
	
	Запрос.УстановитьПараметр("Ссылки", СсылкиПолей);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		НомерСтроки = СтрокиПолей.Получить(РезультатЗапроса.Ссылка);
		Если НомерСтроки <> Неопределено Тогда
			СтрокаРасчетов = ТаблицаРасчетов[НомерСтроки];
			СтрокаРасчетов.РезультатВычисления = Окр(СтрокаРасчетов.РезультатВычисления, РезультатЗапроса.ТочностьЧисла);
		КонецЕсли;	
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьАлгоритмБезопасно(Объект, Алгоритм, НачальнаяТаблица, СтруктураСтроки, ВыборкаПолейШаблона) Экспорт
	Если ЗначениеЗаполнено(Алгоритм) Тогда
		НачатьТранзакцию();
		УстановитьБезопасныйРежим(Истина);
		Попытка
			Выполнить(Алгоритм);
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
			ЗаписьЖурналаРегистрации("ЕАС" + "." + "ОшибкаАлгоритма", 
				УровеньЖурналаРегистрации.Ошибка, Метаданные.Документы.ЕАС_ОтчетыИнтеграции, Объект.Ссылка,
				СтрШаблон("Ошибка выполнения алгоритма: %1", ПредставлениеОшибки));
			ОбщегоНазначения.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		КонецПопытки;	
		УстановитьБезопасныйРежим(Ложь);
		ОтменитьТранзакцию(); // для безопасности (невозможно изменить базу)
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 
                                                     
#Область ОтладкаАлгоритмовЗаполнения         

Процедура ОтладкаЖивотноводство2019(Объект, НачальнаяТаблица, СтруктураСтроки, ВыборкаПолейШаблона) Экспорт
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	/// алгоритм формирования отчета по животноводству
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	Объект.ДатаНачала    = Дата(2019, 1, 1);
	Объект.ДатаОкончания = Дата(2020, 12, 31, 23, 59, 59);
	
	Для НомерГода = 2019 По 2020 Цикл
		ДатаНачала    = Дата(НомерГода, 1, 1);
		ДатаОкончания = Дата(НомерГода, 12, 31, 23, 59, 59);
		ПараметрыУчета = ОбщегоНазначенияБП.ОпределитьПараметрыУчета();
		
		ГруппаЖивотноводство = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Животноводство КРС", Истина, Справочники.ЕАС_ПоказателиОтчетов.ПустаяСсылка(), Объект.Шаблон);
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	ВложенныйЗапрос.Ссылка КАК Ссылка
		               |ИЗ
		               |	(ВЫБРАТЬ ПЕРВЫЕ 1
		               |		Периоды.Ссылка КАК Ссылка,
		               |		1 КАК Приоритет
		               |	ИЗ
		               |		Справочник.Периоды КАК Периоды
		               |	ГДЕ
		               |		Периоды.ДатаНачала = &ДатаНачала
		               |		И Периоды.ДатаОкончания = &ДатаОкончания
		               |	
		               |	ОБЪЕДИНИТЬ ВСЕ
		               |	
		               |	ВЫБРАТЬ
		               |		ЗНАЧЕНИЕ(Справочник.Периоды.ПустаяСсылка),
		               |		0) КАК ВложенныйЗапрос
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	ВложенныйЗапрос.Приоритет УБЫВ";
	
		Запрос.УстановитьПараметр("ДатаНачала", ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", НачалоДня(ДатаОкончания));
	
		РезультатЗапроса = Запрос.Выполнить().Выбрать();
		РезультатЗапроса.Следующий();
		ПериодАПК = РезультатЗапроса.Ссылка;
		
		/////////////////////////////////                       
		// КРС //////////////////////////
		ПоказательКРС = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("КРС",,ГруппаЖивотноводство);
		Голова = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("836");
		ПодразделениеКРС = ЕАС_ЗаполнениеОтчетов.ЗначениеПараметраЗаполнения(Объект, "Подразделение: Животноводство КРС");
		ВидыНоменклатураПродуктивныйСкот = ЕАС_ЗаполнениеОтчетов.ЗначениеПараметраЗаполнения(Объект, "ВидыНоменклатуры: Животные продуктивный скот");
		
		ЗапросСП51 = Новый Запрос;
		ЗапросСП51.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		
		//ЖивотныеНаВыращивании
		ЗапросСП51.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток КАК МассаНачальныйОстаток,
		|	ХозрасчетныйОстаткиИОбороты.схКоличествоДопНачальныйОстаток КАК ГоловНачальныйОстаток,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Номенклатура,
		|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Склад,
		|	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК ВидДвижения,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток КАК МассаКонечныйОстаток,
		|	ХозрасчетныйОстаткиИОбороты.схКоличествоДопКонечныйОстаток КАК ГоловКонечныйОстаток,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт КАК МассаПриход,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт КАК МассаРасход,
		|	ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт КАК ГоловПриход,
		|	ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт КАК ГоловРасход,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Приплод)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПриплод,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Приплод)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПриплод,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Привес)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПривес,
		|	0 КАК ГоловПривес,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПереведеноИзДругихГрупп,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПереведеноИзДругихГрупп,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПереведеноИзДругихФерм,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПереведеноИзДругихФерм,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийПриход)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПрочийПриход,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийПриход)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПрочийПриход,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.КупленоПолученоВОбмен)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаКупленоПолученоВОбмен,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.КупленоПолученоВОбмен)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловКупленоПолученоВОбмен,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Реализовано)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаРеализовано,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Реализовано)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловРеализовано,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПереведеноВДругиеГруппы,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПереведеноВДругиеГруппы,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПереведеноВДругиеФермы,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПереведеноВДругиеФермы,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Забой)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаЗабой,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Забой)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловЗабой,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Падеж)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПадеж,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Падеж)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПадеж,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийРасход)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПрочийРасход,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийРасход)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПрочийРасход,
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.Организация КАК Организация,
		|	ХозрасчетныйОстаткиИОбороты.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ЖивотныеНаВыращивании
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода,,, Счет В ИЕРАРХИИ
		|		(&СчетУчетаЖивотных), &ВидыСубконто, Организация = &Организация
		|	И Подразделение = &Подразделение
		|	И Выразить(Субконто1 как Справочник.Номенклатура).ВидНоменклатуры В (&ВидыНоменклатуры)) КАК ХозрасчетныйОстаткиИОбороты
		|ГДЕ
		|	&СкладскойУчет > 0
		|	И (&ВариантОтчета = 0
		|	ИЛИ &ВариантОтчета = 2)";
		//ЖивотныеНаВыращивании
		ЗапросСП51.УстановитьПараметр("ВариантОтчета", 2); // все вместе
		ЗапросСП51.УстановитьПараметр("Организация",   Объект.Организация); 
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.схВидыДвиженийЖивотныхПтицы);
		ЗапросСП51.УстановитьПараметр("ВидыСубконто",      ВидыСубконто); 
		ЗапросСП51.УстановитьПараметр("НачалоПериода",     ДатаНачала);
		ЗапросСП51.УстановитьПараметр("КонецПериода",      ДатаОкончания);
		ЗапросСП51.УстановитьПараметр("СкладскойУчет",     ПараметрыУчета.СкладскойУчет); // суммовой
		ЗапросСП51.УстановитьПараметр("СчетУчетаЖивотных", ПланыСчетов.Хозрасчетный.ЖивотныеНаВыращиванииИОткорме);
		ЗапросСП51.УстановитьПараметр("Подразделение",     ПодразделениеКРС);
		ЗапросСП51.УстановитьПараметр("ВидыНоменклатуры",   ВидыНоменклатураПродуктивныйСкот);
		ЗапросСП51.Выполнить();
		
		//ОсновныеСредства
		ЗапросСП51.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХозрасчетныйОстаткиИОбороты.схКоличествоДопНачальныйОстаток КАК МассаНачальныйОстаток,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток КАК ГоловНачальныйОстаток,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ОсновноеСредство,
		|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК ВидДвижения,
		|	ХозрасчетныйОстаткиИОбороты.схКоличествоДопКонечныйОстаток КАК МассаКонечныйОстаток,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток КАК ГоловКонечныйОстаток,
		|	ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт КАК МассаПриход,
		|	ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт КАК МассаРасход,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт КАК ГоловПриход,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт КАК ГоловРасход,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Приплод)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПриплод,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Приплод)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПриплод,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Привес)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПривес,
		|	0 КАК ГоловПривес,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПереведеноИзДругихГрупп,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПереведеноИзДругихГрупп,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПереведеноИзДругихФерм,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПереведеноИзДругихФерм,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийПриход)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПрочийПриход,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийПриход)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПрочийПриход,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.КупленоПолученоВОбмен)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловКупленоПолученоВОбмен,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.КупленоПолученоВОбмен)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаКупленоПолученоВОбмен,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Реализовано)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловРеализовано,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Реализовано)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаРеализовано,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПереведеноВДругиеГруппы,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПереведеноВДругиеГруппы,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПереведеноВДругиеФермы,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПереведеноВДругиеФермы,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Забой)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловЗабой,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Забой)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаЗабой,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Падеж)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПадеж,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Падеж)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПадеж,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийРасход)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПрочийРасход,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийРасход)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПрочийРасход,
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ЗначенияСвойствОбъектов.Значение КАК Номенклатура,
		|	ХозрасчетныйОстаткиИОбороты.Организация КАК Организация,
		|	ХозрасчетныйОстаткиИОбороты.Подразделение КАК Подразделение,
		|	&ПустойСклад КАК Склад
		|ПОМЕСТИТЬ ОсновныеСредства
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода,,, Счет = &СчетОС, &ВидыСубконтоОС,
		|		(Субконто1.ГруппаОС = ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ПродуктивныйСкот)
		|	ИЛИ Субконто1.ГруппаОС = ЗНАЧЕНИЕ(Перечисление.ГруппыОС.РабочийСкот))
		|	И Организация = &Организация
		|	И Подразделение = &Подразделение) КАК ХозрасчетныйОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства.ДополнительныеРеквизиты КАК ЗначенияСвойствОбъектов
		|		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ЗначенияСвойствОбъектов.Ссылка
		|		И
		|			(ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.схНоменклатураЖивотных))
		|ГДЕ
		|	Выразить(ЗначенияСвойствОбъектов.Значение как Справочник.Номенклатура).ВидНоменклатуры В (&ВидыНоменклатуры)
		|	И (&ВариантОтчета = 1
		|	ИЛИ &ВариантОтчета = 2)";
		//ОсновныеСредства
		ВидыСубконтоОС = Новый Массив;
		ВидыСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
		ВидыСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.схВидыДвиженийЖивотныхПтицы);
		
		ЗапросСП51.УстановитьПараметр("ВидыСубконтоОС", ВидыСубконтоОС);
		ЗапросСП51.УстановитьПараметр("ПустойСклад",    Справочники.Склады.ПустаяСсылка());
		ЗапросСП51.УстановитьПараметр("СчетОС",         ПланыСчетов.Хозрасчетный.ПродуктивныйРабочийСкот);
		ЗапросСП51.Выполнить();


		//ЖивотныеНаВыращиванииБезСклада		
		ЗапросСП51.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток КАК МассаНачальныйОстаток,
		|	ХозрасчетныйОстаткиИОбороты.схКоличествоДопНачальныйОстаток КАК ГоловНачальныйОстаток,
		|	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Номенклатура,
		|	&ПустойСклад КАК Склад,
		|	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК ВидДвижения,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток КАК МассаКонечныйОстаток,
		|	ХозрасчетныйОстаткиИОбороты.схКоличествоДопКонечныйОстаток КАК ГоловКонечныйОстаток,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт КАК МассаПриход,
		|	ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт КАК МассаРасход,
		|	ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт КАК ГоловПриход,
		|	ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт КАК ГоловРасход,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Приплод)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПриплод,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Приплод)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПриплод,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Привес)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПривес,
		|	0 КАК ГоловПривес,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПереведеноИзДругихГрупп,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПереведеноИзДругихГрупп,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПереведеноИзДругихФерм,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПереведеноИзДругихФерм,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийПриход)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПрочийПриход,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийПриход)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПрочийПриход,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.КупленоПолученоВОбмен)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаКупленоПолученоВОбмен,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.КупленоПолученоВОбмен)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловКупленоПолученоВОбмен,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Реализовано)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаРеализовано,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Реализовано)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловРеализовано,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПереведеноВДругиеГруппы,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПереведеноВДругиеГруппы,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПереведеноВДругиеФермы,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПереведеноВДругиеФермы,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Забой)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаЗабой,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Забой)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловЗабой,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Падеж)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПадеж,
		|	ВЫБОР
		|		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Падеж)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПадеж,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийРасход)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК МассаПрочийРасход,
		|	ВЫБОР
		|		КОГДА
		|			ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийРасход)
		|			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ГоловПрочийРасход,
		|	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		|	ХозрасчетныйОстаткиИОбороты.Организация КАК Организация,
		|	ХозрасчетныйОстаткиИОбороты.Подразделение КАК Подразделение
		|ПОМЕСТИТЬ ЖивотныеНаВыращиванииБезСклада
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(&НачалоПериода, &КонецПериода,,, Счет В ИЕРАРХИИ (&СчетУчетаЖивотных)
		|		, &ВидыСубконтоБезСклада, Организация = &Организация
		|	И Подразделение = &Подразделение
		|	И Выразить(Субконто1 как Справочник.Номенклатура).ВидНоменклатуры В (&ВидыНоменклатуры)) КАК ХозрасчетныйОстаткиИОбороты
		|ГДЕ
		|	&СкладскойУчет = 0
		|	И (&ВариантОтчета = 0
		|	ИЛИ &ВариантОтчета = 2)";
		//ЖивотныеНаВыращиванииБезСклада		
		ВидыСубконтоОС = Новый Массив;
		ВидыСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		ВидыСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.схВидыДвиженийЖивотныхПтицы);
		ЗапросСП51.УстановитьПараметр("ВидыСубконтоБезСклада", ВидыСубконтоОС);
		ЗапросСП51.Выполнить();
		
		ЗапросСП51.Текст = "ВЫБРАТЬ
		                   |	СУММА(ВложенныйЗапрос.ГоловКонечныйОстаток) КАК ГоловКонечныйОстаток,
		                   |	СУММА(ВложенныйЗапрос.ГоловПриплод) КАК ГоловПриплод
		                   |ИЗ
		                   |	(ВЫБРАТЬ
		                   |		ЖивотныеНаВыращивании.Номенклатура КАК Номенклатура,
		                   |		СУММА(ЖивотныеНаВыращивании.ГоловКонечныйОстаток) КАК ГоловКонечныйОстаток,
		                   |		СУММА(ЖивотныеНаВыращивании.ГоловПриплод) КАК ГоловПриплод
		                   |	ИЗ
		                   |		ЖивотныеНаВыращивании КАК ЖивотныеНаВыращивании
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ЖивотныеНаВыращивании.Номенклатура
		                   |	
		                   |	ОБЪЕДИНИТЬ ВСЕ
		                   |	
		                   |	ВЫБРАТЬ
		                   |		ОсновныеСредства.Номенклатура,
		                   |		СУММА(ОсновныеСредства.ГоловКонечныйОстаток),
		                   |		СУММА(ОсновныеСредства.ГоловПриплод) КАК ГоловПриплод
		                   |	ИЗ
		                   |		ОсновныеСредства КАК ОсновныеСредства
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ОсновныеСредства.Номенклатура
		                   |	
		                   |	ОБЪЕДИНИТЬ ВСЕ
		                   |	
		                   |	ВЫБРАТЬ
		                   |		ЖивотныеНаВыращиванииБезСклада.Номенклатура,
		                   |		СУММА(ЖивотныеНаВыращиванииБезСклада.ГоловКонечныйОстаток),
		                   |		СУММА(ЖивотныеНаВыращиванииБезСклада.ГоловПриплод) КАК ГоловПриплод
		                   |	ИЗ
		                   |		ЖивотныеНаВыращиванииБезСклада КАК ЖивотныеНаВыращиванииБезСклада
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ЖивотныеНаВыращиванииБезСклада.Номенклатура) КАК ВложенныйЗапрос";
		РезультатЗапроса = ЗапросСП51.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			ГоловКонечныйОстаток = РезультатЗапроса.ГоловКонечныйОстаток;
			ГоловПриплод         = РезультатЗапроса.ГоловПриплод;
		Иначе
			ГоловКонечныйОстаток = 0;
			ГоловПриплод         = 0;
		КонецЕсли;	
		
		СтруктураСтроки.ПоказательОтчета 	= ПоказательКРС;
		СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
		СтруктураСтроки.ЕдиницаИзмерения    = Голова;
		СтруктураСтроки.ДатаНачала          = ДатаНачала;
		СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
		СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Поголовье КРС на конец отчетного периода'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ГоловКонечныйОстаток, Ложь);
		
		// Приплод
		СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Получено приплода'");  
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ГоловПриплод, Ложь);
		
		// Поголовье коров на конец отчетного периода
		ЗапросСП51.Текст = "ВЫБРАТЬ
		                   |	СУММА(ВложенныйЗапрос.ГоловКонечныйОстаток) КАК ГоловКонечныйОстаток
		                   |ИЗ
		                   |	(ВЫБРАТЬ
		                   |		ЖивотныеНаВыращивании.Номенклатура КАК Номенклатура,
		                   |		СУММА(ЖивотныеНаВыращивании.ГоловКонечныйОстаток) КАК ГоловКонечныйОстаток
		                   |	ИЗ
		                   |		ЖивотныеНаВыращивании КАК ЖивотныеНаВыращивании
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ЖивотныеНаВыращивании.Номенклатура
		                   |	
		                   |	ОБЪЕДИНИТЬ ВСЕ
		                   |	
		                   |	ВЫБРАТЬ
		                   |		ОсновныеСредства.Номенклатура,
		                   |		СУММА(ОсновныеСредства.ГоловКонечныйОстаток)
		                   |	ИЗ
		                   |		ОсновныеСредства КАК ОсновныеСредства
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ОсновныеСредства.Номенклатура
		                   |	
		                   |	ОБЪЕДИНИТЬ ВСЕ
		                   |	
		                   |	ВЫБРАТЬ
		                   |		ЖивотныеНаВыращиванииБезСклада.Номенклатура,
		                   |		СУММА(ЖивотныеНаВыращиванииБезСклада.ГоловКонечныйОстаток)
		                   |	ИЗ
		                   |		ЖивотныеНаВыращиванииБезСклада КАК ЖивотныеНаВыращиванииБезСклада
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ЖивотныеНаВыращиванииБезСклада.Номенклатура) КАК ВложенныйЗапрос
		                   |ГДЕ
		                   |	ВложенныйЗапрос.Номенклатура = &Корова";
		НоменклатураКорова = ЕАС_ЗаполнениеОтчетов.ЗначениеПараметраЗаполнения(Объект, "Номенклатура Корова");
		ЗапросСП51.УстановитьПараметр("Корова", НоменклатураКорова);    
		РезультатЗапроса = ЗапросСП51.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			КоровКонечныйОстаток = РезультатЗапроса.ГоловКонечныйОстаток;
		КонецЕсли;	
		
		СтруктураСтроки.ДопПараметр = НСтр("ru = 'Поголовье коров на конец отчетного периода'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, КоровКонечныйОстаток, Ложь);
		
		// Среднегодовое поголовье коров (из Формы АПК 13)
		СтруктураСтроки.ДопПараметр = НСтр("ru = 'Среднегодовое поголовье коров'");
		ПоказателиАПК = ЕАС_ОбщегоНазначенияЛокальный.ПолучитьПоказателиАПК(ПериодАПК, Объект.Организация, "СХ", "Форма13АПК", "стр131111_гр3", 0);
		СреднегодовоеПоголовьеКоров = 0;
		ПоказателиАПК.Свойство("Форма13АПК_стр131111_гр3", СреднегодовоеПоголовьеКоров);
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СреднегодовоеПоголовьеКоров, Ложь);
		
		// Деловой выход телят
		// поголовье коров и нетелей на начало года / на кол-во голов приплода * 100. На примере Бетюнь: 239/265*100=90% 
		ЗапросСП51.Текст = "ВЫБРАТЬ
		                   |	СУММА(ВложенныйЗапрос.ГоловНачальныйОстаток) КАК ГоловНачальныйОстаток
		                   |ИЗ
		                   |	(ВЫБРАТЬ
		                   |		ЖивотныеНаВыращивании.Номенклатура КАК Номенклатура,
		                   |		СУММА(ЖивотныеНаВыращивании.ГоловНачальныйОстаток) КАК ГоловНачальныйОстаток
		                   |	ИЗ
		                   |		ЖивотныеНаВыращивании КАК ЖивотныеНаВыращивании
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ЖивотныеНаВыращивании.Номенклатура
		                   |	
		                   |	ОБЪЕДИНИТЬ ВСЕ
		                   |	
		                   |	ВЫБРАТЬ
		                   |		ОсновныеСредства.Номенклатура,
		                   |		СУММА(ОсновныеСредства.ГоловНачальныйОстаток)
		                   |	ИЗ
		                   |		ОсновныеСредства КАК ОсновныеСредства
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ОсновныеСредства.Номенклатура
		                   |	
		                   |	ОБЪЕДИНИТЬ ВСЕ
		                   |	
		                   |	ВЫБРАТЬ
		                   |		ЖивотныеНаВыращиванииБезСклада.Номенклатура,
		                   |		СУММА(ЖивотныеНаВыращиванииБезСклада.ГоловНачальныйОстаток)
		                   |	ИЗ
		                   |		ЖивотныеНаВыращиванииБезСклада КАК ЖивотныеНаВыращиванииБезСклада
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ЖивотныеНаВыращиванииБезСклада.Номенклатура) КАК ВложенныйЗапрос
		                   |ГДЕ
		                   |	ВложенныйЗапрос.Номенклатура В (&Коровы)";
		НоменклатураНетели = ЕАС_ЗаполнениеОтчетов.ЗначениеПараметраЗаполнения(Объект, "Номенклатура Нетели");
		МассивКоровы = Новый Массив;
		МассивКоровы.Добавить(НоменклатураКорова);
		МассивКоровы.Добавить(НоменклатураНетели);
		ЗапросСП51.УстановитьПараметр("Коровы", МассивКоровы);    
		РезультатЗапроса = ЗапросСП51.Выполнить().Выбрать();           
		Если РезультатЗапроса.Следующий() И ЗначениеЗаполнено(РезультатЗапроса.ГоловНачальныйОстаток) Тогда
			НачальныйОстатокКоров = РезультатЗапроса.ГоловНачальныйОстаток;
		Иначе	
			НачальныйОстатокКоров = 0;
		КонецЕсли;	
		Если НачальныйОстатокКоров = 0 Тогда
			ДеловойВыходТелят = ?(ГоловПриплод = 0, 0, 100);      
		Иначе	
			ДеловойВыходТелят = ГоловПриплод/НачальныйОстатокКоров * 100;
		КонецЕсли;	
		ПустаяЕИ = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
		СтруктураСтроки.ЕдиницаИзмерения    = ПустаяЕИ;
		СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Деловой выход телят'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ДеловойВыходТелят, Ложь);
		
		// ПРОИЗВОДСТВО МОЛОКА
		ПоказательПроизводствоМолока = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Производство молока",,ГруппаЖивотноводство);
		Центнер = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("206");    
		НоменклатураМолоко = ЕАС_ЗаполнениеОтчетов.ЗначениеПараметраЗаполнения(Объект, "Номенклатура Молоко");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
					   |	ХозрасчетныйОбороты.КоличествоОборотДт КАК КоличествоОборотДт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И Субконто1 В ИЕРАРХИИ (&Молоко),
		               |			,
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("Молоко",        НоменклатураМолоко);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоКоличествоУдоя = 0;
		ИтогоСумма = 0;
		
		СтруктураСтроки.ПоказательОтчета 	= ПоказательПроизводствоМолока;
		СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
		СтруктураСтроки.ЕдиницаИзмерения    = Центнер;
		СтруктураСтроки.ДатаНачала          = ДатаНачала;
		СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
		СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Валовой надой молока'");
		                
		Пока Выборка.Следующий() Цикл
			
			ИтогоКоличествоУдоя = ИтогоКоличествоУдоя + Выборка.КоличествоОборотДт;
			
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоКоличествоУдоя/100, Ложь);
		КонецЦикла;
		
		// Количественный показатель по номенклатуре "молоко" в кг за год / стр.3 среднегодовое поголовье
		Килограмм = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("166");
		СтруктураСтроки.ДопПараметр  	 = НСтр("ru = 'Среднегодовой удой молока на 1 корову'");
		СтруктураСтроки.ЕдиницаИзмерения = Килограмм;
		Если СреднегодовоеПоголовьеКоров <> 0 Тогда
			СреднегодовойУдойНаКорову = ИтогоКоличествоУдоя/СреднегодовоеПоголовьеКоров;
		КонецЕсли;	
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СреднегодовойУдойНаКорову, Истина);
		
		
		// Себестоимость единицы молока
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Выпуск.Продукция КАК Продукция,
		|	Выпуск.КоличествоОборот КАК КоличествоВыпуска
		|ПОМЕСТИТЬ Выпуск
		|ИЗ
		|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|				И Продукция В ИЕРАРХИИ (&Молоко)) КАК Выпуск
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Себестоимость.Продукция КАК Продукция,
		|	СУММА(Себестоимость.Сумма) КАК Сумма,
		|	СУММА(Себестоимость.СуммаПР) КАК СуммаПР,
		|	СУММА(Себестоимость.СуммаНУ) КАК СуммаНУ,
		|	СУММА(Себестоимость.СуммаВР) КАК СуммаВР
		|ПОМЕСТИТЬ Материалы
		|ИЗ
		|	РегистрСведений.РасчетКалькуляцииСебестоимости КАК Себестоимость
		|ГДЕ
		|	Себестоимость.Активность
		|	И Себестоимость.Продукция В ИЕРАРХИИ(&Молоко)
		|	И Себестоимость.Организация = &Организация
		|	И Себестоимость.ПериодРасчета >= &НачалоПериода
		|	И Себестоимость.ПериодРасчета <= &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	Себестоимость.Продукция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Выпуск.Продукция КАК Продукция,
		|	Выпуск.КоличествоВыпуска КАК Количество,
		|	isnull(Материалы.Сумма, 0) КАК Сумма,
		|	isnull(Материалы.СуммаПР, 0) КАК СуммаПР,
		|	isnull(Материалы.СуммаНУ, 0) КАК СуммаНУ,
		|	isnull(Материалы.СуммаВР, 0) КАК СуммаВР
		|ИЗ
		|	Выпуск КАК Выпуск
		|		ЛЕВОЕ СОЕДИНЕНИЕ Материалы КАК Материалы
		|		ПО Выпуск.Продукция = Материалы.Продукция";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("Молоко",        НоменклатураМолоко);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоКоличество = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			
			ИтогоКоличество = ИтогоКоличество + Выборка.Количество;
			ИтогоСумма     = ИтогоСумма + Выборка.Сумма;
			
		КонецЦикла;
		
		Рубль = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("383");
		СтруктураСтроки.ДопПараметр       = НСтр("ru = 'Себестоимость молока'");
		СтруктураСтроки.ЕдиницаИзмерения  = Рубль;
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ?(ИтогоКоличество = 0, 0, ИтогоСумма/ИтогоКоличество), Ложь);
		
		// Реализовано молока
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
		               |	ХозрасчетныйОбороты.КоличествоОборотКт КАК КоличествоОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И Субконто1 В ИЕРАРХИИ (&Молоко),
		               |			КорСчет В ИЕРАРХИИ (&КорСчет),
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
		Запрос.УстановитьПараметр("КорСчет",       ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("Молоко",        НоменклатураМолоко);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоРеализованоМолока = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			
			ИтогоРеализованоМолока = ИтогоРеализованоМолока + Выборка.КоличествоОборотКт;
			
		КонецЦикла;
		СтруктураСтроки.ЕдиницаИзмерения    = Центнер;
		СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Реализовано молока'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоРеализованоМолока/100, Ложь);
		
		// Выручка от реализации молока
		НГМолоко = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Молоко");

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
		               |	ХозрасчетныйОбороты.КоличествоОборотКт КАК КоличествоОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И Субконто1 В ИЕРАРХИИ (&Молоко),
		               |			,
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.ВыручкаСельХоз);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("Молоко",        НГМолоко);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоВыручкаМолока = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			
			ПродукцияСтрока = Строка(Выборка.Продукция);
			Если ВРег(ПродукцияСтрока) <> ВРег("Молоко") Тогда
				Продолжить;
			КонецЕсли;	
			
			ИтогоВыручкаМолока = ИтогоВыручкаМолока + Выборка.СуммаОборотКт;
			
		КонецЦикла;
		ТысячаРублей = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("384");
		СтруктураСтроки.ЕдиницаИзмерения = ТысячаРублей;
		СтруктураСтроки.ДопПараметр      = НСтр("ru = 'Выручка от реализации молока'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоВыручкаМолока/1000, Ложь);
		
		// Себестоимость продажи молока
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
		               |	ХозрасчетныйОбороты.КоличествоОборотКт КАК КоличествоОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И Субконто1 В ИЕРАРХИИ (&Молоко),
		               |			,
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.СебестоимостьПродажСельХоз);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("Молоко",        НГМолоко);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоСебестоимостьМолока = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			
			ПродукцияСтрока = Строка(Выборка.Продукция);
			Если ВРег(ПродукцияСтрока) <> ВРег("Молоко") Тогда
				Продолжить;
			КонецЕсли;	
			
			ИтогоСебестоимостьМолока = ИтогоСебестоимостьМолока + Выборка.СуммаОборотДт;
			
		КонецЦикла;
		ТысячаРублей = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("384");
		СтруктураСтроки.ЕдиницаИзмерения = ТысячаРублей;
		СтруктураСтроки.ДопПараметр      = НСтр("ru = 'Себестоимость продажи молока'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоСебестоимостьМолока / 1000, Ложь);
		
		// Прибыль/убыток от продажи молока
		СтруктураСтроки.ДопПараметр      = НСтр("ru = 'Прибыль/убыток от продажи молока'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, (ИтогоВыручкаМолока - ИтогоСебестоимостьМолока) / 1000, Ложь);
		
		
		// ПРОИЗВОДСТВО МЯСА
		ПоказательПроизводствоМяса = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Производство мяса",,,Объект.Шаблон);
		ПродукцияМясоГовядина = Справочники.Номенклатура.НайтиПоНаименованию("мясо говядина",,Справочники.Номенклатура.НайтиПоНаименованию("Продукция"));
		ПродукцияФаршГовядина = Справочники.Номенклатура.НайтиПоНаименованию("фарш говядина",,Справочники.Номенклатура.НайтиПоНаименованию("Продукция"));
		ЗапросСП51.Текст = "ВЫБРАТЬ
		                   |		ЖивотныеНаВыращивании.Номенклатура КАК Номенклатура,
		                   |		СУММА(ЖивотныеНаВыращивании.МассаПривес) КАК МассаПривес,
		                   |		СУММА(ЖивотныеНаВыращивании.МассаПадеж) КАК МассаПадеж
		                   |	ИЗ
		                   |		ЖивотныеНаВыращивании КАК ЖивотныеНаВыращивании
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ЖивотныеНаВыращивании.Номенклатура
		                   |	
		                   |	ОБЪЕДИНИТЬ ВСЕ
		                   |	
		                   |	ВЫБРАТЬ
		                   |		ОсновныеСредства.Номенклатура,
		                   |		СУММА(ОсновныеСредства.МассаПривес) КАК МассаПривес,
		                   |		СУММА(ОсновныеСредства.МассаПадеж) КАК МассаПадеж
		                   |	ИЗ
		                   |		ОсновныеСредства КАК ОсновныеСредства
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ОсновныеСредства.Номенклатура
		                   |	
		                   |	ОБЪЕДИНИТЬ ВСЕ
		                   |	
		                   |	ВЫБРАТЬ
		                   |		ЖивотныеНаВыращиванииБезСклада.Номенклатура,
		                   |		СУММА(ЖивотныеНаВыращиванииБезСклада.МассаПривес) КАК МассаПривес,
		                   |		СУММА(ЖивотныеНаВыращиванииБезСклада.МассаПадеж) КАК МассаПадеж
		                   |	ИЗ
		                   |		ЖивотныеНаВыращиванииБезСклада КАК ЖивотныеНаВыращиванииБезСклада
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ЖивотныеНаВыращиванииБезСклада.Номенклатура";
		РезультатЗапроса = ЗапросСП51.Выполнить().Выбрать();
		МассаПривес = 0;
		Пока РезультатЗапроса.Следующий() Цикл
			МассаПривес         = МассаПривес + РезультатЗапроса.МассаПривес;
			Если СтрНайти(Строка(РезультатЗапроса.Номенклатура), "2019") <> 0 Тогда
				МассаПривес     = МассаПривес - РезультатЗапроса.МассаПадеж;
			КонецЕсли;	
		КонецЦикла;
		
		СтруктураСтроки.ПоказательОтчета 	= ПоказательПроизводствоМяса;
		СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
		СтруктураСтроки.ЕдиницаИзмерения    = Центнер;
		СтруктураСтроки.ДатаНачала          = ДатаНачала;
		СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
		СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Получено прироста молодняка КРС'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, МассаПривес, Ложь);
		
		// Реализовано мяса КРС
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
		               |	ХозрасчетныйОбороты.КоличествоОборотКт КАК КоличествоОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И (Субконто1 В ИЕРАРХИИ (&МясоГовядина)
					   |				 ИЛИ Субконто1 В ИЕРАРХИИ (&ФаршГовядина))
					   |,
		               |			КорСчет В ИЕРАРХИИ (&КорСчет),
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
		Запрос.УстановитьПараметр("КорСчет",       ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("МясоГовядина",  ПродукцияМясоГовядина);
		Запрос.УстановитьПараметр("ФаршГовядина",  ПродукцияФаршГовядина);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоРеализованоМясаГовядины = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			
			ИтогоРеализованоМясаГовядины = ИтогоРеализованоМясаГовядины + Выборка.КоличествоОборотКт;
			
		КонецЦикла;
		СтруктураСтроки.ЕдиницаИзмерения = Центнер;
		СтруктураСтроки.ДопПараметр      = НСтр("ru = 'Реализовано мяса КРС'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоРеализованоМясаГовядины/100, Ложь);
		
		// Себестоимость мяса
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Выпуск.Продукция КАК Продукция,
		|	Выпуск.КоличествоОборот КАК КоличествоВыпуска
		|ПОМЕСТИТЬ Выпуск
		|ИЗ
		|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|				И 
		|				(Продукция В ИЕРАРХИИ (&МясоГовядина)
		|				ИЛИ Продукция В ИЕРАРХИИ (&ФаршГовядина))
		|               
		|					) КАК Выпуск
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Себестоимость.Продукция КАК Продукция,
		|	СУММА(Себестоимость.Сумма) КАК Сумма,
		|	СУММА(Себестоимость.СуммаПР) КАК СуммаПР,
		|	СУММА(Себестоимость.СуммаНУ) КАК СуммаНУ,
		|	СУММА(Себестоимость.СуммаВР) КАК СуммаВР
		|ПОМЕСТИТЬ Материалы
		|ИЗ
		|	РегистрСведений.РасчетКалькуляцииСебестоимости КАК Себестоимость
		|ГДЕ
		|	Себестоимость.Активность
		|	И 
		|		(Себестоимость.Продукция В ИЕРАРХИИ (&МясоГовядина)
		|		ИЛИ Себестоимость.Продукция В ИЕРАРХИИ (&ФаршГовядина))
		|	И Себестоимость.Организация = &Организация
		|	И Себестоимость.ПериодРасчета >= &НачалоПериода
		|	И Себестоимость.ПериодРасчета <= &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	Себестоимость.Продукция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Выпуск.Продукция КАК Продукция,
		|	Выпуск.КоличествоВыпуска КАК Количество,
		|	isnull(Материалы.Сумма, 0) КАК Сумма,
		|	isnull(Материалы.СуммаПР, 0) КАК СуммаПР,
		|	isnull(Материалы.СуммаНУ, 0) КАК СуммаНУ,
		|	isnull(Материалы.СуммаВР, 0) КАК СуммаВР
		|ИЗ
		|	Выпуск КАК Выпуск
		|		ЛЕВОЕ СОЕДИНЕНИЕ Материалы КАК Материалы
		|		ПО Выпуск.Продукция = Материалы.Продукция";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("МясоГовядина",  ПродукцияМясоГовядина);
		Запрос.УстановитьПараметр("ФаршГовядина",  ПродукцияФаршГовядина);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоКоличество = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			
			ИтогоКоличество = ИтогоКоличество + Выборка.Количество;
			ИтогоСумма     = ИтогоСумма + Выборка.Сумма;
			
		КонецЦикла;
		
		Рубль = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("383");
		СтруктураСтроки.ДопПараметр       = НСтр("ru = 'Себестоимость мяса'");
		СтруктураСтроки.ЕдиницаИзмерения  = Рубль;
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ?(ИтогоКоличество = 0, 0, ИтогоСумма/ИтогоКоличество), Ложь);
		
		// Выручка от реализации мяса
		НГМясо = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Мясо");

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
		               |	ХозрасчетныйОбороты.КоличествоОборотКт КАК КоличествоОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И Субконто1 В ИЕРАРХИИ (&Мясо),
		               |			,
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.ВыручкаСельХоз);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("Мясо",        НГМясо);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоВыручкаМяса = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			
			ИтогоВыручкаМяса = ИтогоВыручкаМяса + Выборка.СуммаОборотКт;
			
		КонецЦикла;
		ТысячаРублей = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("384");
		СтруктураСтроки.ЕдиницаИзмерения = ТысячаРублей;
		СтруктураСтроки.ДопПараметр      = НСтр("ru = 'Выручка от реализации мяса'");
		СтрокаВыручки = ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоВыручкаМяса/1000, Ложь);
		
		// Себестоимость продажи мяса
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
		               |	ХозрасчетныйОбороты.КоличествоОборотКт КАК КоличествоОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И Субконто1 В ИЕРАРХИИ (&Мясо),
		               |			,
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.СебестоимостьПродажСельХоз);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("Мясо",          НГМясо);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоСебестоимостьМяса = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			
			ИтогоСебестоимостьМяса = ИтогоСебестоимостьМяса + Выборка.СуммаОборотДт;
			
		КонецЦикла;
		ТысячаРублей = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("384");
		СтруктураСтроки.ЕдиницаИзмерения = ТысячаРублей;
		СтруктураСтроки.ДопПараметр      = НСтр("ru = 'Себестоимость продажи мяса'");
		СтрокаСебестоимость = ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоСебестоимостьМяса / 1000, Ложь);
		
		// Прибыль/убыток от продажи мяса
		ЕАС_ЗаполнениеОтчетов.ФорматированиеЗначенийВычислений(НачальнаяТаблица, СтруктураСтроки, ВыборкаПолейШаблона);
		СтруктураСтроки.ДопПараметр      = НСтр("ru = 'Прибыль/убыток от продажи мяса'");
		
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СтрокаВыручки.РезультатВычисления - СтрокаСебестоимость.РезультатВычисления, Ложь);
		
		// СУБСИДИИ НА ФИНАНСОВОЕ ОЗДОРОАЛЕНИЕ
		ПоказательСубсидияНаФинОздоровление = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Субсидия на финансовое оздоровление",,ГруппаЖивотноводство);
		ТысячаРублей = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("384");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И Субконто1 В (&Субконто1),
		               |			,
		               |			) КАК ХозрасчетныйОбороты";
		
		МассивНазначений = Новый Массив;
		МассивНазначений.Добавить(Справочники.НазначениеЦелевыхСредств.НайтиПоНаименованию("Фин.обеспечение части затрат на продукцию скотоводства (ФО)"));
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.ЦелевоеФинансированиеИзБюджета);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НазначениеЦелевыхСредств);
		Запрос.УстановитьПараметр("Субконто1",     МассивНазначений);      
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();  
		
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки.ПоказательОтчета 	= ПоказательСубсидияНаФинОздоровление;
			СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
			СтруктураСтроки.ЕдиницаИзмерения    = ТысячаРублей;
			СтруктураСтроки.ДатаНачала          = ДатаНачала;
			СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
			СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Получено'");
			
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, Выборка.СуммаОборотДт/1000, Истина);
			ИтогоСумма = ИтогоСумма + Выборка.СуммаОборотДт/1000;
		КонецЦикла;
		
		/////////////////////////////////////////////
		// ЛОШАДИ / КОБЫЛЫ //////////////////////////
		ГруппаЛошади = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Животноводство прочие (лошади и т.д.)", , ,  Объект.Шаблон);
		ПоказательЛошадиОбщие = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Общие показатели",,ГруппаЛошади);
		Голова = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("836");
		НаВыращивании = Справочники.Номенклатура.НайтиПоНаименованию("Животные на выращивании и продукт.скот", Истина );
		Лошади = Справочники.Номенклатура.НайтиПоНаименованию("Лошади", Истина, НаВыращивании);
		
		ЗапросСП51 = Новый Запрос;
		ЗапросСП51.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		ЗапросСП51.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                   |	ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток КАК МассаНачальныйОстаток,
		                   |	ХозрасчетныйОстаткиИОбороты.схКоличествоДопНачальныйОстаток КАК ГоловНачальныйОстаток,
		                   |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Номенклатура,
		                   |	&ПустойСклад КАК Склад,
		                   |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК ВидДвижения,
		                   |	ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток КАК МассаКонечныйОстаток,
		                   |	ХозрасчетныйОстаткиИОбороты.схКоличествоДопКонечныйОстаток КАК ГоловКонечныйОстаток,
		                   |	ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт КАК МассаПриход,
		                   |	ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт КАК МассаРасход,
		                   |	ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт КАК ГоловПриход,
		                   |	ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт КАК ГоловРасход,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Приплод)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПриплод,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Приплод)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПриплод,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Привес)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПривес,
		                   |	0 КАК ГоловПривес,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПереведеноИзДругихГрупп,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПереведеноИзДругихГрупп,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПереведеноИзДругихФерм,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПереведеноИзДругихФерм,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийПриход)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПрочийПриход,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийПриход)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПрочийПриход,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.КупленоПолученоВОбмен)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаКупленоПолученоВОбмен,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.КупленоПолученоВОбмен)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловКупленоПолученоВОбмен,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Реализовано)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаРеализовано,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Реализовано)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловРеализовано,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПереведеноВДругиеГруппы,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПереведеноВДругиеГруппы,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПереведеноВДругиеФермы,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПереведеноВДругиеФермы,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Забой)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаЗабой,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Забой)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловЗабой,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Падеж)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПадеж,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Падеж)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПадеж,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийРасход)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПрочийРасход,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийРасход)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПрочийРасход,
		                   |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		                   |	ХозрасчетныйОстаткиИОбороты.Организация КАК Организация,
		                   |	ХозрасчетныйОстаткиИОбороты.Подразделение КАК Подразделение
		                   |ПОМЕСТИТЬ ЖивотныеНаВыращиванииБезСклада
		                   |ИЗ
		                   |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		                   |			&НачалоПериода,
		                   |			&КонецПериода,
		                   |			,
		                   |			,
		                   |			Счет В ИЕРАРХИИ (&СчетУчетаЖивотных),
		                   |			&ВидыСубконтоБезСклада,
		                   |			Организация = &Организация
		                   |				И Субконто1 В ИЕРАРХИИ (&Лошади)) КАК ХозрасчетныйОстаткиИОбороты
		                   |ГДЕ
		                   |	&СкладскойУчет = 0
		                   |	И (&ВариантОтчета = 0
		                   |			ИЛИ &ВариантОтчета = 2)
		                   |;
		                   |
		                   |////////////////////////////////////////////////////////////////////////////////
		                   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                   |	ХозрасчетныйОстаткиИОбороты.схКоличествоДопНачальныйОстаток КАК МассаНачальныйОстаток,
		                   |	ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток КАК ГоловНачальныйОстаток,
		                   |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК ОсновноеСредство,
		                   |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК ВидДвижения,
		                   |	ХозрасчетныйОстаткиИОбороты.схКоличествоДопКонечныйОстаток КАК МассаКонечныйОстаток,
		                   |	ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток КАК ГоловКонечныйОстаток,
		                   |	ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт КАК МассаПриход,
		                   |	ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт КАК МассаРасход,
		                   |	ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт КАК ГоловПриход,
		                   |	ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт КАК ГоловРасход,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Приплод)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПриплод,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Приплод)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПриплод,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Привес)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПривес,
		                   |	0 КАК ГоловПривес,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПереведеноИзДругихГрупп,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПереведеноИзДругихГрупп,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПереведеноИзДругихФерм,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПереведеноИзДругихФерм,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийПриход)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПрочийПриход,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийПриход)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПрочийПриход,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.КупленоПолученоВОбмен)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловКупленоПолученоВОбмен,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.КупленоПолученоВОбмен)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаКупленоПолученоВОбмен,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Реализовано)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловРеализовано,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Реализовано)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаРеализовано,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПереведеноВДругиеГруппы,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПереведеноВДругиеГруппы,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПереведеноВДругиеФермы,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПереведеноВДругиеФермы,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Забой)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловЗабой,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Забой)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаЗабой,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Падеж)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПадеж,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Падеж)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПадеж,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийРасход)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПрочийРасход,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто2.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийРасход)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПрочийРасход,
		                   |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		                   |	ЗначенияСвойствОбъектов.Значение КАК Номенклатура,
		                   |	ХозрасчетныйОстаткиИОбороты.Организация КАК Организация,
		                   |	ХозрасчетныйОстаткиИОбороты.Подразделение КАК Подразделение,
		                   |	&ПустойСклад КАК Склад
		                   |ПОМЕСТИТЬ ОсновныеСредства
		                   |ИЗ
		                   |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		                   |			&НачалоПериода,
		                   |			&КонецПериода,
		                   |			,
		                   |			,
		                   |			Счет = &СчетОС,
		                   |			&ВидыСубконтоОС,
		                   |			Организация = &Организация
		                   |				И (Субконто1.ГруппаОС = ЗНАЧЕНИЕ(Перечисление.ГруппыОС.ПродуктивныйСкот)
		                   |					ИЛИ Субконто1.ГруппаОС = ЗНАЧЕНИЕ(Перечисление.ГруппыОС.РабочийСкот))) КАК ХозрасчетныйОстаткиИОбороты
		                   |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ОсновныеСредства.ДополнительныеРеквизиты КАК ЗначенияСвойствОбъектов
		                   |		ПО ХозрасчетныйОстаткиИОбороты.Субконто1 = ЗначенияСвойствОбъектов.Ссылка
		                   |			И (ЗначенияСвойствОбъектов.Свойство = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.схНоменклатураЖивотных))
		                   |ГДЕ
		                   |	(&ВариантОтчета = 1
		                   |			ИЛИ &ВариантОтчета = 2)
		                   |	И ВЫРАЗИТЬ(ЗначенияСвойствОбъектов.Значение КАК Справочник.Номенклатура) В ИЕРАРХИИ (&Лошади)
		                   |;
		                   |
		                   |////////////////////////////////////////////////////////////////////////////////
		                   |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                   |	ХозрасчетныйОстаткиИОбороты.КоличествоНачальныйОстаток КАК МассаНачальныйОстаток,
		                   |	ХозрасчетныйОстаткиИОбороты.схКоличествоДопНачальныйОстаток КАК ГоловНачальныйОстаток,
		                   |	ХозрасчетныйОстаткиИОбороты.Субконто1 КАК Номенклатура,
		                   |	ХозрасчетныйОстаткиИОбороты.Субконто2 КАК Склад,
		                   |	ХозрасчетныйОстаткиИОбороты.Субконто3 КАК ВидДвижения,
		                   |	ХозрасчетныйОстаткиИОбороты.КоличествоКонечныйОстаток КАК МассаКонечныйОстаток,
		                   |	ХозрасчетныйОстаткиИОбороты.схКоличествоДопКонечныйОстаток КАК ГоловКонечныйОстаток,
		                   |	ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт КАК МассаПриход,
		                   |	ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт КАК МассаРасход,
		                   |	ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт КАК ГоловПриход,
		                   |	ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт КАК ГоловРасход,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Приплод)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПриплод,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Приплод)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПриплод,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Привес)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПривес,
		                   |	0 КАК ГоловПривес,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПереведеноИзДругихГрупп,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПереведеноИзДругихГрупп,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПереведеноИзДругихФерм,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПереведеноИзДругихФерм,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийПриход)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПрочийПриход,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийПриход)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПрочийПриход,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.КупленоПолученоВОбмен)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаКупленоПолученоВОбмен,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.КупленоПолученоВОбмен)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотДт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловКупленоПолученоВОбмен,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Реализовано)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаРеализовано,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Реализовано)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловРеализовано,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПереведеноВДругиеГруппы,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихГруппВДругиеГруппы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПереведеноВДругиеГруппы,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПереведеноВДругиеФермы,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПереведеноИзДругихФермВДругиеФермы)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПереведеноВДругиеФермы,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Забой)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаЗабой,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Забой)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловЗабой,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Падеж)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПадеж,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.Падеж)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПадеж,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийРасход)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.КоличествоОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК МассаПрочийРасход,
		                   |	ВЫБОР
		                   |		КОГДА ХозрасчетныйОстаткиИОбороты.Субконто3.ВидДвижения = ЗНАЧЕНИЕ(Перечисление.схВидыДвиженийЖивотныхИПтицы.ПрочийРасход)
		                   |			ТОГДА ХозрасчетныйОстаткиИОбороты.схКоличествоДопОборотКт
		                   |		ИНАЧЕ 0
		                   |	КОНЕЦ КАК ГоловПрочийРасход,
		                   |	ХозрасчетныйОстаткиИОбороты.Счет КАК Счет,
		                   |	ХозрасчетныйОстаткиИОбороты.Организация КАК Организация,
		                   |	ХозрасчетныйОстаткиИОбороты.Подразделение КАК Подразделение
		                   |ПОМЕСТИТЬ ЖивотныеНаВыращивании
		                   |ИЗ
		                   |	РегистрБухгалтерии.Хозрасчетный.ОстаткиИОбороты(
		                   |			&НачалоПериода,
		                   |			&КонецПериода,
		                   |			,
		                   |			,
		                   |			Счет В ИЕРАРХИИ (&СчетУчетаЖивотных),
		                   |			&ВидыСубконто,
		                   |			Организация = &Организация
		                   |				И Субконто1 В ИЕРАРХИИ (&Лошади)) КАК ХозрасчетныйОстаткиИОбороты
		                   |ГДЕ
		                   |	&СкладскойУчет > 0
		                   |	И (&ВариантОтчета = 0
		                   |			ИЛИ &ВариантОтчета = 2)";
		ЗапросСП51.УстановитьПараметр("ВариантОтчета", 2); // все вместе
		ЗапросСП51.УстановитьПараметр("Организация",   Объект.Организация); 
		
		ВидыСубконто = Новый Массив;
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
		ВидыСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.схВидыДвиженийЖивотныхПтицы);
		ЗапросСП51.УстановитьПараметр("ВидыСубконто",  ВидыСубконто); 
		
		ВидыСубконтоОС = Новый Массив;
		ВидыСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства);
		ВидыСубконтоОС.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.схВидыДвиженийЖивотныхПтицы);
		ЗапросСП51.УстановитьПараметр("ВидыСубконтоОС", ВидыСубконтоОС);
		
		ВидыСубконтоБезСклада = Новый Массив;
		ВидыСубконтоБезСклада.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		ВидыСубконтоБезСклада.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.схВидыДвиженийЖивотныхПтицы);
		ЗапросСП51.УстановитьПараметр("ВидыСубконтоБезСклада", ВидыСубконтоБезСклада);
		
		ПараметрыУчета = ОбщегоНазначенияБП.ОпределитьПараметрыУчета();
		ЗапросСП51.УстановитьПараметр("СкладскойУчет", ПараметрыУчета.СкладскойУчет); // суммовой
		ЗапросСП51.УстановитьПараметр("ПустойСклад",   Справочники.Склады.ПустаяСсылка());

		ЗапросСП51.УстановитьПараметр("СчетУчетаЖивотных", ПланыСчетов.Хозрасчетный.ЖивотныеНаВыращиванииИОткорме);
		ЗапросСП51.УстановитьПараметр("СчетОС",            ПланыСчетов.Хозрасчетный.ПродуктивныйРабочийСкот);
		
		ЗапросСП51.УстановитьПараметр("НачалоПериода", ДатаНачала);
		ЗапросСП51.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		
		ЗапросСП51.УстановитьПараметр("Лошади", Лошади);
		ЗапросСП51.Выполнить();
		
		ЗапросСП51.Текст = "ВЫБРАТЬ
		                   |	СУММА(ВложенныйЗапрос.ГоловКонечныйОстаток) КАК ГоловКонечныйОстаток,
		                   |	СУММА(ВложенныйЗапрос.ГоловПриплод) КАК ГоловПриплод
		                   |ИЗ
		                   |	(ВЫБРАТЬ
		                   |		ЖивотныеНаВыращивании.Номенклатура КАК Номенклатура,
		                   |		СУММА(ЖивотныеНаВыращивании.ГоловКонечныйОстаток) КАК ГоловКонечныйОстаток,
		                   |		СУММА(ЖивотныеНаВыращивании.ГоловПриплод) КАК ГоловПриплод
		                   |	ИЗ
		                   |		ЖивотныеНаВыращивании КАК ЖивотныеНаВыращивании
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ЖивотныеНаВыращивании.Номенклатура
		                   |	
		                   |	ОБЪЕДИНИТЬ ВСЕ
		                   |	
		                   |	ВЫБРАТЬ
		                   |		ОсновныеСредства.Номенклатура,
		                   |		СУММА(ОсновныеСредства.ГоловКонечныйОстаток),
		                   |		СУММА(ОсновныеСредства.ГоловПриплод) КАК ГоловПриплод
		                   |	ИЗ
		                   |		ОсновныеСредства КАК ОсновныеСредства
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ОсновныеСредства.Номенклатура
		                   |	
		                   |	ОБЪЕДИНИТЬ ВСЕ
		                   |	
		                   |	ВЫБРАТЬ
		                   |		ЖивотныеНаВыращиванииБезСклада.Номенклатура,
		                   |		СУММА(ЖивотныеНаВыращиванииБезСклада.ГоловКонечныйОстаток),
		                   |		СУММА(ЖивотныеНаВыращиванииБезСклада.ГоловПриплод) КАК ГоловПриплод
		                   |	ИЗ
		                   |		ЖивотныеНаВыращиванииБезСклада КАК ЖивотныеНаВыращиванииБезСклада
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ЖивотныеНаВыращиванииБезСклада.Номенклатура) КАК ВложенныйЗапрос";
		РезультатЗапроса = ЗапросСП51.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			ГоловКонечныйОстаток = РезультатЗапроса.ГоловКонечныйОстаток;
			ГоловПриплод         = РезультатЗапроса.ГоловПриплод;
		Иначе
			ГоловКонечныйОстаток = 0;
			ГоловПриплод         = 0;
		КонецЕсли;	
		
		СтруктураСтроки.ПоказательОтчета 	= ПоказательЛошадиОбщие;
		СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
		СтруктураСтроки.ЕдиницаИзмерения    = Голова;
		СтруктураСтроки.ДатаНачала          = ДатаНачала;
		СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
		СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Поголовье на конец отчетного периода'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ГоловКонечныйОстаток, Ложь);
		
		// Приплод
		СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Получено приплода'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ГоловПриплод, Ложь);
		
		// Поголовье лошадей на конец отчетного периода
		ЗапросСП51.Текст = "ВЫБРАТЬ
		                   |	СУММА(ВложенныйЗапрос.ГоловКонечныйОстаток) КАК ГоловКонечныйОстаток
		                   |ИЗ
		                   |	(ВЫБРАТЬ
		                   |		ЖивотныеНаВыращивании.Номенклатура КАК Номенклатура,
		                   |		СУММА(ЖивотныеНаВыращивании.ГоловКонечныйОстаток) КАК ГоловКонечныйОстаток
		                   |	ИЗ
		                   |		ЖивотныеНаВыращивании КАК ЖивотныеНаВыращивании
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ЖивотныеНаВыращивании.Номенклатура
		                   |	
		                   |	ОБЪЕДИНИТЬ ВСЕ
		                   |	
		                   |	ВЫБРАТЬ
		                   |		ОсновныеСредства.Номенклатура,
		                   |		СУММА(ОсновныеСредства.ГоловКонечныйОстаток)
		                   |	ИЗ
		                   |		ОсновныеСредства КАК ОсновныеСредства
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ОсновныеСредства.Номенклатура
		                   |	
		                   |	ОБЪЕДИНИТЬ ВСЕ
		                   |	
		                   |	ВЫБРАТЬ
		                   |		ЖивотныеНаВыращиванииБезСклада.Номенклатура,
		                   |		СУММА(ЖивотныеНаВыращиванииБезСклада.ГоловКонечныйОстаток)
		                   |	ИЗ
		                   |		ЖивотныеНаВыращиванииБезСклада КАК ЖивотныеНаВыращиванииБезСклада
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ЖивотныеНаВыращиванииБезСклада.Номенклатура) КАК ВложенныйЗапрос
		                   |ГДЕ
		                   |	ВложенныйЗапрос.Номенклатура = &Лошади";
		ЗапросСП51.УстановитьПараметр("Лошади", Справочники.Номенклатура.НайтиПоНаименованию("Лошади", Истина, Лошади));    
		РезультатЗапроса = ЗапросСП51.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			ЛошадиКонечныйОстаток = РезультатЗапроса.ГоловКонечныйОстаток;
		Иначе
			ЛошадиКонечныйОстаток = 0;
		КонецЕсли;	
		
		СтруктураСтроки.ДопПараметр = НСтр("ru = 'Поголовье конематок на конец отчетного периода'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ЛошадиКонечныйОстаток, Ложь);
		
		// Среднегодовое поголовье лошадей (из Формы АПК 13)
		СтруктураСтроки.ДопПараметр = НСтр("ru = 'Среднегодовое поголовье конематок'");
		ПоказателиАПК = ЕАС_ОбщегоНазначенияЛокальный.ПолучитьПоказателиАПК(ПериодАПК, Объект.Организация, "СХ", "Форма13АПК", "стр131120_гр3", 0);
		СреднегодовоеПоголовьеКонематок = 0;
		ПоказателиАПК.Свойство("Форма13АПК_стр131120_гр3", СреднегодовоеПоголовьеКонематок);
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СреднегодовоеПоголовьеКонематок, Ложь);
		
		// Деловой выход жеребят
		// поголовье лошадей и нетелей на начало года / на кол-во голов приплода * 100. На примере Бетюнь: 239/265*100=90% 
		ЗапросСП51.Текст = "ВЫБРАТЬ
		                   |	СУММА(ВложенныйЗапрос.ГоловНачальныйОстаток) КАК ГоловНачальныйОстаток
		                   |ИЗ
		                   |	(ВЫБРАТЬ
		                   |		ЖивотныеНаВыращивании.Номенклатура КАК Номенклатура,
		                   |		СУММА(ЖивотныеНаВыращивании.ГоловНачальныйОстаток) КАК ГоловНачальныйОстаток
		                   |	ИЗ
		                   |		ЖивотныеНаВыращивании КАК ЖивотныеНаВыращивании
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ЖивотныеНаВыращивании.Номенклатура
		                   |	
		                   |	ОБЪЕДИНИТЬ ВСЕ
		                   |	
		                   |	ВЫБРАТЬ
		                   |		ОсновныеСредства.Номенклатура,
		                   |		СУММА(ОсновныеСредства.ГоловНачальныйОстаток)
		                   |	ИЗ
		                   |		ОсновныеСредства КАК ОсновныеСредства
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ОсновныеСредства.Номенклатура
		                   |	
		                   |	ОБЪЕДИНИТЬ ВСЕ
		                   |	
		                   |	ВЫБРАТЬ
		                   |		ЖивотныеНаВыращиванииБезСклада.Номенклатура,
		                   |		СУММА(ЖивотныеНаВыращиванииБезСклада.ГоловНачальныйОстаток)
		                   |	ИЗ
		                   |		ЖивотныеНаВыращиванииБезСклада КАК ЖивотныеНаВыращиванииБезСклада
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ЖивотныеНаВыращиванииБезСклада.Номенклатура) КАК ВложенныйЗапрос
		                   |ГДЕ
		                   |	ВложенныйЗапрос.Номенклатура В (&Лошади)";
		МассивЛошади = Новый Массив;
		МассивЛошади.Добавить(Справочники.Номенклатура.НайтиПоНаименованию("Лошади", Истина, Лошади));
		ЗапросСП51.УстановитьПараметр("Лошади", МассивЛошади);    
		РезультатЗапроса = ЗапросСП51.Выполнить().Выбрать();           
		Если РезультатЗапроса.Следующий() И ЗначениеЗаполнено(РезультатЗапроса.ГоловНачальныйОстаток) Тогда
			НачальныйОстатокЛошади = РезультатЗапроса.ГоловНачальныйОстаток;
		Иначе	
			НачальныйОстатокЛошади = 0;
		КонецЕсли;	
		Если НачальныйОстатокЛошади = 0 Тогда
			ДеловойВыходЖеребят = ?(ГоловПриплод = 0, 0, 100);      
		Иначе	
			ДеловойВыходЖеребят = ГоловПриплод/НачальныйОстатокЛошади * 100;
		КонецЕсли;	
		Процент = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("744");
		СтруктураСтроки.ЕдиницаИзмерения    = Процент;
		СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Деловой выход приплода'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ДеловойВыходЖеребят, Ложь);
		
		// ПРОИЗВОДСТВО МОЛОКА  (КОБЫЛ)
		ПоказательПроизводствоМолокаКобыл = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Производство молока",,ГруппаЛошади);
		Центнер = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("206");    
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
					   |	ХозрасчетныйОбороты.КоличествоОборотДт КАК КоличествоОборотДт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И Субконто1 В ИЕРАРХИИ (&Молоко),
		               |			,
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("Молоко",        Справочники.Номенклатура.НайтиПоНаименованию(НСтр("ru = 'Молоко Кобыл'")));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоКоличествоУдоя = 0;
		ИтогоСумма = 0;
		СтруктураСтроки.ПоказательОтчета 	= ПоказательПроизводствоМолокаКобыл;
		СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
		СтруктураСтроки.ЕдиницаИзмерения    = Центнер;
		СтруктураСтроки.ДатаНачала          = ДатаНачала;
		СтруктураСтроки.ДатаОкончания       = ДатаОкончания;                
		
		Пока Выборка.Следующий() Цикл
			
			ПродукцияСтрока = Строка(Выборка.Продукция);
			Если ВРег(ПродукцияСтрока) = ВРег(НСтр("ru = 'Молоко Кобыл'")) Тогда
				СтруктураСтроки.ДопПараметр = НСтр("ru = 'Валовой надой молока'");
			Иначе
				Продолжить;
			КонецЕсли;	
			
			ИтогоКоличествоУдоя = ИтогоКоличествоУдоя + Выборка.КоличествоОборотДт;
			
		КонецЦикла;
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоКоличествоУдоя/100, Ложь);
		
		// Количественный показатель по номенклатуре "молоко" в кг за год / стр.3 среднегодовое поголовье
		Килограмм = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("166");
		СтруктураСтроки.ДопПараметр  	 = НСтр("ru = 'Среднегодовой удой молока на 1 голову'");
		СтруктураСтроки.ЕдиницаИзмерения = Килограмм;
		Если СреднегодовоеПоголовьеКонематок <> 0 Тогда
			СреднегодовойУдойНаКобылу = ИтогоКоличествоУдоя/СреднегодовоеПоголовьеКонематок;
		КонецЕсли;	
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СреднегодовойУдойНаКобылу, Истина);
		
		
		// Себестоимость единицы молока кобыл
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Выпуск.Продукция КАК Продукция,
		|	Выпуск.КоличествоОборот КАК КоличествоВыпуска
		|ПОМЕСТИТЬ Выпуск
		|ИЗ
		|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|				И Продукция В ИЕРАРХИИ (&Молоко)) КАК Выпуск
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Себестоимость.Продукция КАК Продукция,
		|	СУММА(Себестоимость.Сумма) КАК Сумма,
		|	СУММА(Себестоимость.СуммаПР) КАК СуммаПР,
		|	СУММА(Себестоимость.СуммаНУ) КАК СуммаНУ,
		|	СУММА(Себестоимость.СуммаВР) КАК СуммаВР
		|ПОМЕСТИТЬ Материалы
		|ИЗ
		|	РегистрСведений.РасчетКалькуляцииСебестоимости КАК Себестоимость
		|ГДЕ
		|	Себестоимость.Активность
		|	И Себестоимость.Продукция В ИЕРАРХИИ(&Молоко)
		|	И Себестоимость.Организация = &Организация
		|	И Себестоимость.ПериодРасчета >= &НачалоПериода
		|	И Себестоимость.ПериодРасчета <= &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	Себестоимость.Продукция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Выпуск.Продукция КАК Продукция,
		|	Выпуск.КоличествоВыпуска КАК Количество,
		|	isnull(Материалы.Сумма, 0) КАК Сумма,
		|	isnull(Материалы.СуммаПР, 0) КАК СуммаПР,
		|	isnull(Материалы.СуммаНУ, 0) КАК СуммаНУ,
		|	isnull(Материалы.СуммаВР, 0) КАК СуммаВР
		|ИЗ
		|	Выпуск КАК Выпуск
		|		ЛЕВОЕ СОЕДИНЕНИЕ Материалы КАК Материалы
		|		ПО Выпуск.Продукция = Материалы.Продукция";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("Молоко",        Справочники.Номенклатура.НайтиПоНаименованию(НСтр("ru = 'Молоко Кобыл'")));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоКоличество = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			
			ПродукцияСтрока = Строка(Выборка.Продукция);
			Если ВРег(ПродукцияСтрока) <> ВРег(НСтр("ru = 'Молоко Кобыл'")) Тогда
				Продолжить;
			КонецЕсли;	
			
			ИтогоКоличество = ИтогоКоличество + Выборка.Количество;
			ИтогоСумма     = ИтогоСумма + Выборка.Сумма;
		КонецЦикла;
		
		Рубль = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("383");
		СтруктураСтроки.ДопПараметр       = НСтр("ru = 'Себестоимость молока'");
		СтруктураСтроки.ЕдиницаИзмерения  = Рубль;
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ?(ИтогоКоличество = 0, 0, ИтогоСумма/ИтогоКоличество), Ложь);
		
		// Реализовано молока кобыл
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
		               |	ХозрасчетныйОбороты.КоличествоОборотКт КАК КоличествоОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И Субконто1 В (&Молоко),
		               |			КорСчет В ИЕРАРХИИ (&КорСчет),
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
		Запрос.УстановитьПараметр("КорСчет",       ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("Молоко",        Справочники.Номенклатура.НайтиПоНаименованию("Молоко кобыл"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоРеализованоМолока = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			
			ПродукцияСтрока = Строка(Выборка.Продукция);
			Если ВРег(ПродукцияСтрока) <> ВРег(НСтр("ru = 'Молоко кобыл'")) Тогда
				Продолжить;
			КонецЕсли;	
			
			ИтогоРеализованоМолока = ИтогоРеализованоМолока + Выборка.КоличествоОборотКт;
			
		КонецЦикла;
		СтруктураСтроки.ЕдиницаИзмерения    = Центнер;
		СтруктураСтроки.ДопПараметр = НСтр("ru = 'Реализовано молока'");
		СтрокаРеализовано = ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоРеализованоМолока/100, Ложь);
		
		// Выручка от реализации молока кобыл
		НГМолокоКобыл = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Молоко кобыл");

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
		               |	ХозрасчетныйОбороты.КоличествоОборотКт КАК КоличествоОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И Субконто1 В (&Молоко),
		               |			,
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.ВыручкаСельХоз);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("Молоко",        НГМолокоКобыл);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоВыручкаМолокаКобыл = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			
			ПродукцияСтрока = Строка(Выборка.Продукция);
			Если ВРег(ПродукцияСтрока) <> ВРег("Молоко") Тогда
				Продолжить;
			КонецЕсли;	
			
			ИтогоВыручкаМолокаКобыл = ИтогоВыручкаМолокаКобыл + Выборка.СуммаОборотКт;
			
		КонецЦикла;
		ТысячаРублей = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("384");
		СтруктураСтроки.ЕдиницаИзмерения = ТысячаРублей;
		СтруктураСтроки.ДопПараметр      = НСтр("ru = 'Выручка от реализации молока'");
		СтрокаВыручки = ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоВыручкаМолокаКобыл/1000, Ложь);
		
		// Себестоимость продажи молока кобыл
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
		               |	ХозрасчетныйОбороты.КоличествоОборотКт КАК КоличествоОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И Субконто1 В  (&Молоко),
		               |			,
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.СебестоимостьПродажСельХоз);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("Молоко",        НГМолокоКобыл);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоСебестоимостьМолокаКобыл = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			
			ПродукцияСтрока = Строка(Выборка.Продукция);
			Если ВРег(ПродукцияСтрока) <> ВРег(НСтр("ru = 'Молоко кобыл'")) Тогда
				Продолжить;
			КонецЕсли;	
			
			ИтогоСебестоимостьМолокаКобыл = ИтогоСебестоимостьМолокаКобыл + Выборка.СуммаОборотДт;
			
		КонецЦикла;
		ТысячаРублей = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("384");
		СтруктураСтроки.ЕдиницаИзмерения = ТысячаРублей;
		СтруктураСтроки.ДопПараметр      = НСтр("ru = 'Себестоимость продажи молока'");
		СтрокаСебестоимость = ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоСебестоимостьМолокаКобыл / 1000, Ложь);   
		
		// Прибыль/убыток от продажи молока кобыл
		СтруктураСтроки.ДопПараметр      = НСтр("ru = 'Прибыль/убыток от продажи молока'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, (СтрокаВыручки.РезультатВычисления - СтрокаСебестоимость.РезультатВычисления) / 1000, Ложь);
		
		
		// ПРОИЗВОДСТВО МЯСА ЛОШАДЕй
		ПоказательПроизводствоМясаЛошадей = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Производство мяса",,ГруппаЛошади, Объект.Шаблон);
		ПродукцияМясоЛошадей = Справочники.Номенклатура.НайтиПоНаименованию("мясо конина",,Справочники.Номенклатура.НайтиПоНаименованию("Продукция"));
		ЗапросСП51.Текст = "ВЫБРАТЬ
		                   |	СУММА(ВложенныйЗапрос.МассаПривес) КАК МассаПривес
		                   |ИЗ
		                   |	(ВЫБРАТЬ
		                   |		ЖивотныеНаВыращивании.Номенклатура КАК Номенклатура,
		                   |		СУММА(ЖивотныеНаВыращивании.МассаПривес) КАК МассаПривес
		                   |	ИЗ
		                   |		ЖивотныеНаВыращивании КАК ЖивотныеНаВыращивании
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ЖивотныеНаВыращивании.Номенклатура
		                   |	
		                   |	ОБЪЕДИНИТЬ ВСЕ
		                   |	
		                   |	ВЫБРАТЬ
		                   |		ОсновныеСредства.Номенклатура,
		                   |		СУММА(ОсновныеСредства.МассаПривес) КАК МассаПривес
		                   |	ИЗ
		                   |		ОсновныеСредства КАК ОсновныеСредства
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ОсновныеСредства.Номенклатура
		                   |	
		                   |	ОБЪЕДИНИТЬ ВСЕ
		                   |	
		                   |	ВЫБРАТЬ
		                   |		ЖивотныеНаВыращиванииБезСклада.Номенклатура,
		                   |		СУММА(ЖивотныеНаВыращиванииБезСклада.МассаПривес) КАК МассаПривес
		                   |	ИЗ
		                   |		ЖивотныеНаВыращиванииБезСклада КАК ЖивотныеНаВыращиванииБезСклада
		                   |	
		                   |	СГРУППИРОВАТЬ ПО
		                   |		ЖивотныеНаВыращиванииБезСклада.Номенклатура) КАК ВложенныйЗапрос";
		РезультатЗапроса = ЗапросСП51.Выполнить().Выбрать();
		Если РезультатЗапроса.Следующий() Тогда
			МассаПривес         = РезультатЗапроса.МассаПривес;
		Иначе
			МассаПривес         = 0;
		КонецЕсли;	
		
		СтруктураСтроки.ПоказательОтчета 	= ПоказательПроизводствоМясаЛошадей;
		СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
		СтруктураСтроки.ЕдиницаИзмерения    = Центнер;
		СтруктураСтроки.ДатаНачала          = ДатаНачала;
		СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
		СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Получено прироста молодняка лошадей'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, МассаПривес, Ложь);
		
		// Реализовано мяса конины
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
		               |	ХозрасчетныйОбороты.КоличествоОборотКт КАК КоличествоОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И Субконто1 В ИЕРАРХИИ (&МясоЛошадей),
		               |			КорСчет В ИЕРАРХИИ (&КорСчет),
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.ГотоваяПродукция);
		Запрос.УстановитьПараметр("КорСчет",       ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("МясоЛошадей",   ПродукцияМясоЛошадей);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоРеализованоМясаЛошадей = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			
			ИтогоРеализованоМясаЛошадей = ИтогоРеализованоМясаЛошадей + Выборка.КоличествоОборотКт;
			
		КонецЦикла;
		СтруктураСтроки.ЕдиницаИзмерения = Центнер;
		СтруктураСтроки.ДопПараметр      = НСтр("ru = 'Реализовано мяса лошадей'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоРеализованоМясаЛошадей/100, Ложь);
		
		// Себестоимость мяса
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Выпуск.Продукция КАК Продукция,
		|	Выпуск.КоличествоОборот КАК КоличествоВыпуска
		|ПОМЕСТИТЬ Выпуск
		|ИЗ
		|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|				И Продукция В ИЕРАРХИИ (&МясоЛошадей)) КАК Выпуск
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Себестоимость.Продукция КАК Продукция,
		|	СУММА(Себестоимость.Сумма) КАК Сумма,
		|	СУММА(Себестоимость.СуммаПР) КАК СуммаПР,
		|	СУММА(Себестоимость.СуммаНУ) КАК СуммаНУ,
		|	СУММА(Себестоимость.СуммаВР) КАК СуммаВР
		|ПОМЕСТИТЬ Материалы
		|ИЗ
		|	РегистрСведений.РасчетКалькуляцииСебестоимости КАК Себестоимость
		|ГДЕ
		|	Себестоимость.Активность
		|	И Себестоимость.Продукция В ИЕРАРХИИ(&МясоЛошадей)
		|	И Себестоимость.Организация = &Организация
		|	И Себестоимость.ПериодРасчета >= &НачалоПериода
		|	И Себестоимость.ПериодРасчета <= &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	Себестоимость.Продукция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Выпуск.Продукция КАК Продукция,
		|	Выпуск.КоличествоВыпуска КАК Количество,
		|	isnull(Материалы.Сумма, 0) КАК Сумма,
		|	isnull(Материалы.СуммаПР, 0) КАК СуммаПР,
		|	isnull(Материалы.СуммаНУ, 0) КАК СуммаНУ,
		|	isnull(Материалы.СуммаВР, 0) КАК СуммаВР
		|ИЗ
		|	Выпуск КАК Выпуск
		|		ЛЕВОЕ СОЕДИНЕНИЕ Материалы КАК Материалы
		|		ПО Выпуск.Продукция = Материалы.Продукция";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("МясоЛошадей",  ПродукцияМясоЛошадей);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоКоличество = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			
			ИтогоКоличество = ИтогоКоличество + Выборка.Количество;
			ИтогоСумма     = ИтогоСумма + Выборка.Сумма;
			
		КонецЦикла;
		
		Рубль = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("383");
		СтруктураСтроки.ДопПараметр       = НСтр("ru = 'Себестоимость мяса'");
		СтруктураСтроки.ЕдиницаИзмерения  = Рубль;
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ?(ИтогоКоличество = 0, 0, ИтогоСумма/ИтогоКоличество), Ложь);
		
		// Выручка от реализации мяса конины
		НГМясоКонина = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Мясо конины");

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
		               |	ХозрасчетныйОбороты.КоличествоОборотКт КАК КоличествоОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация И &Мясо <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		               |				И Субконто1 В (&Мясо),
		               |			,
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.ВыручкаСельХоз);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("Мясо",          НГМясоКонина);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоВыручкаМясаЛошадей = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			
			ИтогоВыручкаМясаЛошадей = ИтогоВыручкаМясаЛошадей + Выборка.СуммаОборотКт;
			
		КонецЦикла;
		ТысячаРублей = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("384");
		СтруктураСтроки.ЕдиницаИзмерения = ТысячаРублей;
		СтруктураСтроки.ДопПараметр      = НСтр("ru = 'Выручка от реализации мяса лошадей'");
		СтрокаВыручки = ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоВыручкаМясаЛошадей/1000, Ложь);
		
		// Себестоимость продажи мяса конины
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
		               |	ХозрасчетныйОбороты.КоличествоОборотКт КАК КоличествоОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация  И &Мясо <> ЗНАЧЕНИЕ(Справочник.НоменклатурныеГруппы.ПустаяСсылка)
		               |				И Субконто1 В (&Мясо),
		               |			,
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.СебестоимостьПродажСельХоз);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("Мясо",          НГМясоКонина);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоСебестоимостьМясаКонины = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			
			ИтогоСебестоимостьМясаКонины = ИтогоСебестоимостьМясаКонины + Выборка.СуммаОборотДт;
			
		КонецЦикла;
		ТысячаРублей = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("384");
		СтруктураСтроки.ЕдиницаИзмерения = ТысячаРублей;
		СтруктураСтроки.ДопПараметр      = НСтр("ru = 'Себестоимость продажи мяса лошадей'");
		СтрокаСебестоимость = ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоСебестоимостьМясаКонины / 1000, Ложь);
		
		// Прибыль/убыток от продажи мяса конины
		ЕАС_ЗаполнениеОтчетов.ФорматированиеЗначенийВычислений(НачальнаяТаблица, СтруктураСтроки, ВыборкаПолейШаблона);
		СтруктураСтроки.ДопПараметр      = НСтр("ru = 'Прибыль/убыток от продажи мяса лошадей'");
		
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СтрокаВыручки.РезультатВычисления - СтрокаСебестоимость.РезультатВычисления, Ложь);
		
		// СУБСИДИИ НА ФИНАНСОВОЕ ОЗДОРОАЛЕНИЕ (по лошадям)
		ПоказательСубсидияНаФинОздоровлениеЛошадей = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Субсидия на содержание кобыл",,ГруппаЛошади);
		ТысячаРублей = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("384");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И Субконто1 В (&Субконто1),
		               |			,
		               |			) КАК ХозрасчетныйОбороты";
		
		МассивНазначений = Новый Массив;
		МассивНазначений.Добавить(Справочники.НазначениеЦелевыхСредств.НайтиПоНаименованию("Субсидия на возмещение затрат по содержанию кобыл"));
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.ЦелевоеФинансированиеИзБюджета);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НазначениеЦелевыхСредств);
		Запрос.УстановитьПараметр("Субконто1",     МассивНазначений);      
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();  
		
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки.ПоказательОтчета 	= ПоказательСубсидияНаФинОздоровлениеЛошадей;
			СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
			СтруктураСтроки.ЕдиницаИзмерения    = ТысячаРублей;
			СтруктураСтроки.ДатаНачала          = ДатаНачала;
			СтруктураСтроки.ДатаОкончания       = ДатаОкончания;    
			СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Получено'");
			
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, Выборка.СуммаОборотДт/1000, Истина);
			ИтогоСумма = ИтогоСумма + Выборка.СуммаОборотДт/1000;
		КонецЦикла;
		
		//////////////////////////
		/// ФИНАНСОВЫЙ РЕЗУЛЬТАТ по животноводству
		//////////////////////////
		ЕАС_ЗаполнениеОтчетов.ФорматированиеЗначенийВычислений(НачальнаяТаблица, СтруктураСтроки, ВыборкаПолейШаблона);
		ГруппаФинансовыйРезультат = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Финансовый результат",,, Объект.Шаблон);
		
		ПоказательФинРезультатВыручкаОтРеализации = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Выручка от реализации",,ГруппаФинансовыйРезультат);
		СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
		СтруктураСтроки.ЕдиницаИзмерения    = ТысячаРублей;
		СтруктураСтроки.ДатаНачала          = ДатаНачала;
		СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
		СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Итого'");
		
		СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Выручка от реализации молока'");
		СтруктураСтроки.ПоказательОтчета    = ПоказательПроизводствоМолока;
		СтрокиМолоко = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
		
		СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Выручка от реализации мяса'");
		СтруктураСтроки.ПоказательОтчета    = ПоказательПроизводствоМяса;
		СтрокиМясо = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
		
		СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Выручка от реализации молока'");
		СтруктураСтроки.ПоказательОтчета    = ПоказательПроизводствоМолокаКобыл;
		СтрокиМолокоКобыл = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
		
		СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Выручка от реализации мяса лошадей'");
		СтруктураСтроки.ПоказательОтчета    = ПоказательПроизводствоМясаЛошадей;
		СтрокиМясоЛошадей = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
		
		СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Итого'");
		СтруктураСтроки.ПоказательОтчета    = ПоказательФинРезультатВыручкаОтРеализации;
		СтрокаВыручка = ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, 0, Истина);
		Если СтрокиМолоко.Количество() > 0 Тогда
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СтрокиМолоко[0].РезультатВычисления, Истина);
		КонецЕсли;
		Если СтрокиМолокоКобыл.Количество() > 0 Тогда
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СтрокиМолокоКобыл[0].РезультатВычисления, Истина);
		КонецЕсли;
		Если СтрокиМясо.Количество() > 0 Тогда
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СтрокиМясо[0].РезультатВычисления, Истина);
		КонецЕсли;
		Если СтрокиМясоЛошадей.Количество() > 0 Тогда
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СтрокиМясоЛошадей[0].РезультатВычисления, Истина);
		КонецЕсли;
		
		// себестоимость
		ПоказательФинРезультатСебестоимостьПродаж = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Себестоимость продаж",,ГруппаФинансовыйРезультат);
		
		СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Себестоимость продажи молока'");
		СтруктураСтроки.ПоказательОтчета    = ПоказательПроизводствоМолока;
		СтрокиМолоко = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
		
		СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Себестоимость продажи мяса'");
		СтруктураСтроки.ПоказательОтчета    = ПоказательПроизводствоМяса;
		СтрокиМясо = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
		
		СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Себестоимость продажи молока'");
		СтруктураСтроки.ПоказательОтчета    = ПоказательПроизводствоМолокаКобыл;
		СтрокиМолокоКобыл = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
		
		СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Себестоимость продажи мяса лошадей'");
		СтруктураСтроки.ПоказательОтчета    = ПоказательПроизводствоМясаЛошадей;
		СтрокиМясоЛошадей = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
		
		СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Итого'");
		СтруктураСтроки.ПоказательОтчета    = ПоказательФинРезультатСебестоимостьПродаж;
		СтрокаСебестоимость = ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, 0, Истина);
		Если СтрокиМолоко.Количество() > 0 Тогда
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СтрокиМолоко[0].РезультатВычисления, Истина);
		КонецЕсли;
		Если СтрокиМолокоКобыл.Количество() > 0 Тогда
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СтрокиМолокоКобыл[0].РезультатВычисления, Истина);
		КонецЕсли;
		Если СтрокиМясо.Количество() > 0 Тогда
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СтрокиМясо[0].РезультатВычисления, Истина);
		КонецЕсли;
		Если СтрокиМясоЛошадей.Количество() > 0 Тогда
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СтрокиМясоЛошадей[0].РезультатВычисления, Истина);
		КонецЕсли;
		
		// прибыль/убыток
		ПоказательФинРезультатПрибыльУбыток = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Прибыль/убыток",,ГруппаФинансовыйРезультат);
		СтруктураСтроки.ДопПараметр         = НСтр("ru = 'Итого'");
		СтруктураСтроки.ПоказательОтчета    = ПоказательФинРезультатПрибыльУбыток;
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СтрокаВыручка.РезультатВычисления - СтрокаСебестоимость.РезультатВычисления, Истина);
		
	КонецЦикла; // НомерГода	

КонецПроцедуры		

Процедура ОтладкаЗерноводствоКормозаготовка2019(Объект, НачальнаяТаблица, СтруктураСтроки, ВыборкаПолейШаблона) Экспорт

	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	/// алгоритм формирования отчета по зерноводству и кормозаготовке
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	///////////////////////////////////////////////////////////////////////////////
	Для НомерГода = 2019 По 2020 Цикл
		ДатаНачала    = Дата(НомерГода, 1, 1);
		ДатаОкончания = Дата(НомерГода, 12, 31, 23, 59, 59);
		
		
		// Разделение на зерноводство и кормозаготовка
		ПодразделениеЗерноводство   = ЕАС_ЗаполнениеОтчетов.ЗначениеПараметраЗаполнения(Объект, "ПодразделениеЗерноводство");
		ПодразделениеКормозаготовка = ЕАС_ЗаполнениеОтчетов.ЗначениеПараметраЗаполнения(Объект, "ПодразделениеКормозаготовка");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ВыпускПродукцииСПоля.Номенклатура КАК Продукция,
		               |	ВыпускПродукцииСПоля.НоменклатурнаяГруппа КАК НоменклатурнаяГруппа,
		               |	ВыпускПродукцииСПоля.СтруктураПосевныхПлощадей КАК СтруктураПосевныхПлощадей,
		               |	ВыпускПродукцииСПоля.СтруктураПосевныхПлощадей.Культура КАК Культура,
		               |	ВыпускПродукцииСПоля.Ссылка.ПодразделениеЗатрат КАК ПодразделениеЗатрат
		               |ИЗ
		               |	Документ.схВыпускПродукцииСПоля.Продукция КАК ВыпускПродукцииСПоля
		               |ГДЕ
		               |	ВыпускПродукцииСПоля.Ссылка.Организация = &Организация
		               |	И ВыпускПродукцииСПоля.Ссылка.Проведен
		               |	И ВыпускПродукцииСПоля.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("ДатаНачала",    ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", ДатаОкончания);
		
		РезультатЗапроса = Запрос.Выполнить();                 
		Выборка = РезультатЗапроса.Выбрать();
		
		ОписаниеСправочников = Новый Соответствие;
		ОписаниеСправочников.Вставить("Зерноводство",   Новый Структура("НоменклатурныеГруппы, Продукты, Культуры, СтруктурыПосева", Новый Массив, Новый Массив, Новый Массив, Новый Массив));
		ОписаниеСправочников.Вставить("Кормозаготовка", Новый Структура("НоменклатурныеГруппы, Продукты, Культуры, СтруктурыПосева", Новый Массив, Новый Массив, Новый Массив, Новый Массив));
		Пока Выборка.Следующий() Цикл
			Если Выборка.ПодразделениеЗатрат = ПодразделениеЗерноводство Тогда
				СтруктураСправочника = ОписаниеСправочников.Получить("Зерноводство");
			ИначеЕсли Выборка.ПодразделениеЗатрат = ПодразделениеКормозаготовка Тогда
				СтруктураСправочника = ОписаниеСправочников.Получить("Кормозаготовка");
			Иначе
				Продолжить;
			КонецЕсли;	
			СтруктураСправочника.НоменклатурныеГруппы.Добавить(Выборка.НоменклатурнаяГруппа);
			СтруктураСправочника.Продукты.Добавить(Выборка.Продукция);
			СтруктураСправочника.Культуры.Добавить(Выборка.Культура);
			СтруктураСправочника.СтруктурыПосева.Добавить(Выборка.СтруктураПосевныхПлощадей);
		КонецЦикла;	
		
		//////////////////
		/// ЗЕРНОВОДСТВО
		//////////////////
		СтруктураСправочника = ОписаниеСправочников.Получить("Зерноводство"); 
		
		НоменклатурныеГруппы = СтруктураСправочника.НоменклатурныеГруппы;
		Для Каждого СтрокаНГ Из СтрРазделить("Овес,Пшеница,Ячмень",",") Цикл       
			НГ = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию(СтрокаНГ);
			Если Не НГ.Пустая() И НоменклатурныеГруппы.Найти(НГ) = Неопределено Тогда
				НоменклатурныеГруппы.Добавить(НГ);
			КонецЕсли;	
		КонецЦикла;
		Продукты 			 = СтруктураСправочника.Продукты;
		Культуры 			 = СтруктураСправочника.Культуры;
		СтруктурыПосева 	 = СтруктураСправочника.СтруктурыПосева;
		
		ГруппаЗерноводство  = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Зерноводство",,,Объект.Шаблон);
		
		// ПОСЕВНАЯ ПЛОЩАДЬ
		ПоказательПосевнаяПлощадь = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Посевная площадь",,ГруппаЗерноводство);
		Гектар = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("059");
		Выборка = Справочники.схСтруктураПосевныхПлощадей.Выбрать();
		ИтогоПлощадь = 0;
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ЭтоГруппа Или Выборка.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтруктурыПосева.Найти(Выборка.Ссылка) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			СтруктураСтроки.ПоказательОтчета 	= ПоказательПосевнаяПлощадь;
			СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
			СтруктураСтроки.ЕдиницаИзмерения    = Гектар;
			СтруктураСтроки.ДатаНачала          = ДатаНачала;
			СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
			
			КультураСтрока = Строка(Выборка.Культура);
			НГСтрока       = Строка(Выборка.НоменклатурнаяГруппа);
			Если ВРег(КультураСтрока) = ВРег("Овес") Или ВРег(НГСтрока) = ВРег("Овес") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Овес'");
			ИначеЕсли ВРег(КультураСтрока) = ВРег("Пшеница") Или ВРег(НГСтрока) = ВРег("Пшеница") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Пшеница'");
			ИначеЕсли ВРег(КультураСтрока) = ВРег("Ячмень") Или ВРег(НГСтрока) = ВРег("Ячмень") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Ячмень'");
			Иначе
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Прочие'");
			КонецЕсли;	
			
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, Выборка.ПлощадьПоля, Истина);
			ИтогоПлощадь = ИтогоПлощадь + Выборка.ПлощадьПоля;
		КонецЦикла;
		СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Итого'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоПлощадь, Ложь);
			
		// ВаЛОВОЙ СБОР УРОЖАЯ
		ПоказательВаловыйСборУрожая = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Валовой сбор урожая",,ГруппаЗерноводство);
		Центнер = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("206");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	схВыпускПродукцииСПоляПродукция.Номенклатура КАК Продукция,
		|	схВыпускПродукцииСПоляПродукция.Количество КАК Количество,
		|	схВыпускПродукцииСПоляПродукция.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	схВыпускПродукцииСПоляПродукция.Ссылка.Дата КАК Дата
		|ИЗ
		|	Документ.схВыпускПродукцииСПоля.Продукция КАК схВыпускПродукцииСПоляПродукция
		|ГДЕ
		|	схВыпускПродукцииСПоляПродукция.Ссылка.Организация = &Организация
		|	И схВыпускПродукцииСПоляПродукция.Ссылка.Проведен
		|	И схВыпускПродукцииСПоляПродукция.Ссылка.ПодразделениеЗатрат = &ПодразделениеЗатрат
		|	И схВыпускПродукцииСПоляПродукция.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
		
		Запрос.УстановитьПараметр("Организация",         Объект.Организация);
		Запрос.УстановитьПараметр("ПодразделениеЗатрат", ПодразделениеЗерноводство);
		Запрос.УстановитьПараметр("ДатаОкончания",       ДатаОкончания);
		Запрос.УстановитьПараметр("ДатаНачала",          ДатаНачала);
		
		РезультатЗапроса = Запрос.Выполнить();                 
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоКоличество = 0;
		Пока Выборка.Следующий() Цикл                  
			Если Продукты.Найти(Выборка.Продукция) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			СтруктураСтроки.ПоказательОтчета 	= ПоказательВаловыйСборУрожая;
			СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
			СтруктураСтроки.ЕдиницаИзмерения    = Центнер;
			СтруктураСтроки.ДатаНачала          = ДатаНачала;
			СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
			
			ПродукцияСтрока = Строка(Выборка.Продукция);
			Если ВРег(ПродукцияСтрока) = ВРег("Овес") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Овес'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Пшеница") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Пшеница'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Ячмень") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Ячмень'");
			Иначе
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Прочие'");
			КонецЕсли;	
			
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, Выборка.Количество, Истина);
			ИтогоКоличество = ИтогоКоличество + Выборка.Количество;
		КонецЦикла;
		СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Итого'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоКоличество, Ложь);
		
		// СЕБЕСТОИМОСТЬ ЕДИНИЦЫ УРОЖАЯ
		Если НачальнаяТаблица.Колонки.Найти("Количество") = Неопределено Тогда
			НачальнаяТаблица.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		КонецЕсли;
		Если НачальнаяТаблица.Колонки.Найти("Сумма") = Неопределено Тогда
			НачальнаяТаблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		КонецЕсли;
		ПоказательСебестоимостьЕдиницыУрожая = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Себестоимость единицы урожая",,ГруппаЗерноводство);
		Рубль = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("383");
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Выпуск.Продукция КАК Продукция,
		|	Выпуск.КоличествоОборот КАК КоличествоВыпуска
		|ПОМЕСТИТЬ Выпуск
		|ИЗ
		|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|				И Продукция В ИЕРАРХИИ (&Корма)) КАК Выпуск
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Себестоимость.Продукция КАК Продукция,
		|	СУММА(Себестоимость.Сумма) КАК Сумма,
		|	СУММА(Себестоимость.СуммаПР) КАК СуммаПР,
		|	СУММА(Себестоимость.СуммаНУ) КАК СуммаНУ,
		|	СУММА(Себестоимость.СуммаВР) КАК СуммаВР
		|ПОМЕСТИТЬ Материалы
		|ИЗ
		|	РегистрСведений.РасчетКалькуляцииСебестоимости КАК Себестоимость
		|ГДЕ
		|	Себестоимость.Активность
		|	И Себестоимость.Продукция В ИЕРАРХИИ(&Корма)
		|	И Себестоимость.Организация = &Организация
		|	И Себестоимость.ПериодРасчета >= &НачалоПериода
		|	И Себестоимость.ПериодРасчета <= &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	Себестоимость.Продукция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Выпуск.Продукция КАК Продукция,
		|	Выпуск.КоличествоВыпуска КАК Количество,
		|	isnull(Материалы.Сумма, 0) КАК Сумма,
		|	isnull(Материалы.СуммаПР, 0) КАК СуммаПР,
		|	isnull(Материалы.СуммаНУ, 0) КАК СуммаНУ,
		|	isnull(Материалы.СуммаВР, 0) КАК СуммаВР
		|ИЗ
		|	Выпуск КАК Выпуск
		|		ЛЕВОЕ СОЕДИНЕНИЕ Материалы КАК Материалы
		|		ПО Выпуск.Продукция = Материалы.Продукция";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("Корма",         Справочники.Номенклатура.НайтиПоНаименованию("Корма собственные"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоКоличество = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			
			Если Продукты.Найти(Выборка.Продукция) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			СтруктураСтроки.ПоказательОтчета 	= ПоказательСебестоимостьЕдиницыУрожая;
			СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
			СтруктураСтроки.ЕдиницаИзмерения    = Рубль;
			СтруктураСтроки.ДатаНачала          = ДатаНачала;
			СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
			
			ПродукцияСтрока = Строка(Выборка.Продукция);
			Если ВРег(ПродукцияСтрока) = ВРег("Овес") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Овес'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Пшеница") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Пшеница'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Ячмень") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Ячмень'");
			Иначе
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Прочие'");
			КонецЕсли;	
			
			СтрокаТаблицы = ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, 0, Истина);
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество + Выборка.Количество;
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма + Выборка.Сумма;
			
			ИтогоКоличество = ИтогоКоличество + Выборка.Количество;
			ИтогоСумма     = ИтогоСумма + Выборка.Сумма;
		КонецЦикла;
		
		СтруктураСтроки.ДопПараметр = НСтр("ru = 'Итого'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ?(ИтогоКоличество = 0, 0, ИтогоСумма/ИтогоКоличество), Ложь);
		
		Для Каждого СтрокаПродукт Из СтрРазделить(НСтр("ru = 'Овес,Пшеница,Ячмень,Прочие'"),",") Цикл       
			СтруктураСтроки.ДопПараметр  = СтрокаПродукт;
			СтрокиТаблицы = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
			Если СтрокиТаблицы.Количество() > 0 Тогда
				СтрокаТаблицы = СтрокиТаблицы[0];
				СтрокаТаблицы.РезультатВычисления = ?(СтрокаТаблицы.Количество = 0, 0, СтрокаТаблицы.Сумма/СтрокаТаблицы.Количество);
			КонецЕсли;	
		КонецЦикла;	
		
		// ПОТРЕБЛЕНО НА СОБСТВЕННЫЕ НУЖДЫ
		ПоказательПотребленоНаСобственныеНужды = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Потреблено на собственные нужды",,ГруппаЗерноводство);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
					   |	ХозрасчетныйОбороты.КоличествоОборотКт КАК КоличествоОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И Субконто1 В ИЕРАРХИИ (&Корма),
		               |			КорСчет В (&КорСчета),
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.КормаСобственные);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		КорСчета = Новый Массив;
		КорСчета.Добавить(ПланыСчетов.Хозрасчетный.Животноводство);
		КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ГужевойТранспорт);
		Запрос.УстановитьПараметр("КорСчета",      КорСчета);      
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("Корма",         Справочники.Номенклатура.НайтиПоНаименованию("Корма собственные"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоКоличество = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки.ПоказательОтчета 	= ПоказательПотребленоНаСобственныеНужды;
			СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
			СтруктураСтроки.ЕдиницаИзмерения    = Центнер;
			СтруктураСтроки.ДатаНачала          = ДатаНачала;
			СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
			
			Если Продукты.Найти(Выборка.Продукция) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			ПродукцияСтрока = Строка(Выборка.Продукция);
			Если ВРег(ПродукцияСтрока) = ВРег("Овес") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Овес'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Пшеница") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Пшеница'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Ячмень") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Ячмень'");
			Иначе
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Прочие'");
			КонецЕсли;	
			
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, Выборка.КоличествоОборотКт, Истина);
			ИтогоКоличество = ИтогоКоличество + Выборка.КоличествоОборотКт;
		КонецЦикла;
		
		СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Итого'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоКоличество, Ложь);
		
		// РЕАЛИЗОВАНО ПРОДУКЦИИ ПРОИЗВОДСТВА
		ПоказательРеализованоПродукцииЗерноводства = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Реализовано продукции зерноводства",,ГруппаЗерноводство, Объект.Шаблон);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
					   |	ХозрасчетныйОбороты.КоличествоОборотКт КАК КоличествоОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И Субконто1 В ИЕРАРХИИ (&Корма),
		               |			КорСчет В ИЕРАРХИИ (&КорСчет),
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.КормаСобственные);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		Запрос.УстановитьПараметр("КорСчет",       ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);      
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("Корма",         Справочники.Номенклатура.НайтиПоНаименованию("Корма собственные"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();  
		
		ИтогоКоличество = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки.ПоказательОтчета 	= ПоказательРеализованоПродукцииЗерноводства;
			СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
			СтруктураСтроки.ЕдиницаИзмерения    = Центнер;
			СтруктураСтроки.ДатаНачала          = ДатаНачала;
			СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
			
			Если Продукты.Найти(Выборка.Продукция) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			ПродукцияСтрока = Строка(Выборка.Продукция);
			Если ВРег(ПродукцияСтрока) = ВРег("Овес") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Овес'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Пшеница") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Пшеница'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Ячмень") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Ячмень'");
			Иначе
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Прочие'");
			КонецЕсли;	
			
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, Выборка.КоличествоОборотКт, Истина);
			ИтогоКоличество = ИтогоКоличество + Выборка.КоличествоОборотКт;
		КонецЦикла;
		
		СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Итого'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоКоличество, Ложь);
		
		
		// ВЫРУЧКА ОТ РЕАЛИЗАЦИИ ПРОДУКЦИИ ЗЕРНОВОДСТВА
		ПоказательВыручкаРеализацииЗерноводства = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Выручка от реализации продукции зерноводства",,ГруппаЗерноводство, Объект.Шаблон);
		ТысячаРублей = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("384");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.ВыручкаСельХоз);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();  
		
		ИтогоКоличество = 0;
		ИтогоСумма = 0;
		
		СтруктураСтроки.ПоказательОтчета 	= ПоказательВыручкаРеализацииЗерноводства;
		СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
		СтруктураСтроки.ЕдиницаИзмерения    = ТысячаРублей;
		СтруктураСтроки.ДатаНачала          = ДатаНачала;
		СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
		Пока Выборка.Следующий() Цикл
			
			Если НоменклатурныеГруппы.Найти(Выборка.Продукция) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			ПродукцияСтрока = Строка(Выборка.Продукция);
			Если ВРег(ПродукцияСтрока) = ВРег("Овес") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Овес'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Пшеница") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Пшеница'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Ячмень") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Ячмень'");
			Иначе
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Прочие'");
			КонецЕсли;	
			
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, Выборка.СуммаОборотКт/1000, Истина);
			ИтогоСумма = ИтогоСумма + Выборка.СуммаОборотКт/1000;
		КонецЦикла;
		СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Итого'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоСумма, Ложь);
		
		// СЕМЕСТОИМОСТЬ ПРОДАЖ ПРОДУКЦИИ ЗЕРНОВОДСТВА
		НГОвес      = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Овес");
		НГПшеница   = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Пшеница");
		НГЯчмень    = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Ячмень");
		НГЗерновые  = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Зерновые");
		ПоказательСебестоимостьПродажЗерноводства = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Себестоимость продаж продукции зерноводства",,ГруппаЗерноводство);
		ТысячаРублей = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("384");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.СебестоимостьПродажСельХоз);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();  
		
		ИтогоКоличество = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки.ПоказательОтчета 	= ПоказательСебестоимостьПродажЗерноводства;
			СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
			СтруктураСтроки.ЕдиницаИзмерения    = ТысячаРублей;
			СтруктураСтроки.ДатаНачала          = ДатаНачала;
			СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
			
			Если НоменклатурныеГруппы.Найти(Выборка.Продукция) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			ПродукцияСтрока = Строка(Выборка.Продукция);
			Если ВРег(ПродукцияСтрока) = ВРег("Овес") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Овес'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Пшеница") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Пшеница'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Ячмень") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Ячмень'");
			Иначе
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Прочие'");
			КонецЕсли;	
			
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, Выборка.СуммаОборотДт/1000, Истина);
			ИтогоСумма = ИтогоСумма + Выборка.СуммаОборотДт/1000;
		КонецЦикла;
		
		СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Итого'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоСумма, Ложь);
		
		
		// ПРИБЫЛЬ/УБЫТОК ОТ ПРОДАЖИ ПРОДУКЦИИ ЗЕРНОВОДСТВА
		// Выручка - Себестоимость
		ЕАС_ЗаполнениеОтчетов.ФорматированиеЗначенийВычислений(НачальнаяТаблица, СтруктураСтроки, ВыборкаПолейШаблона);
		
		ПоказательПрибыльУбытокПродажиЗерноводства = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Прибыль/убыток от продажи продукции зерноводства",,ГруппаЗерноводство);
		СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
		СтруктураСтроки.ЕдиницаИзмерения    = ТысячаРублей;
		СтруктураСтроки.ДатаНачала          = ДатаНачала;
		СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
		Для Каждого ДопПараметр Из СтрРазделить(НСтр("ru = 'Овес,Пшеница,Ячмень,Прочие,Итого'"),",") Цикл
			СтруктураСтроки.ПоказательОтчета = ПоказательВыручкаРеализацииЗерноводства;
			СтруктураСтроки.ДопПараметр      = ДопПараметр;
			СтрокиВыручки = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
			
			СтруктураСтроки.ПоказательОтчета = ПоказательСебестоимостьПродажЗерноводства;
			СтрокиСебестоимость = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
			
			СтруктураСтроки.ПоказательОтчета = ПоказательПрибыльУбытокПродажиЗерноводства;
			
			Если СтрокиВыручки.Количество() > 0 Тогда
				ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СтрокиВыручки[0].РезультатВычисления, Истина);
			КонецЕсли;
			Если СтрокиСебестоимость.Количество() > 0 Тогда
				ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, - СтрокиСебестоимость[0].РезультатВычисления, Истина);
			КонецЕсли;
		КонецЦикла;
		
		// СУБСИДИЯ НА ПОДДЕРЖКУ ЗЕРНОВОДСТВА
		ПоказательСубсидияНаПоддержкуЗерноводства = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Субсидия на поддержку зерноводства",,ГруппаЗерноводство);
		ТысячаРублей = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("384");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И Субконто1 В (&Субконто1),
		               |			,
		               |			) КАК ХозрасчетныйОбороты";
		
		МассивНазначений = Новый Массив;
		МассивНазначений.Добавить(Справочники.НазначениеЦелевыхСредств.НайтиПоНаименованию("На подготовку низкопродук. пашни (чистых паров)"));
		МассивНазначений.Добавить(Справочники.НазначениеЦелевыхСредств.НайтиПоНаименованию("Субсидия на возмещение затрат по производству зерна"));
		МассивНазначений.Добавить(Справочники.НазначениеЦелевыхСредств.НайтиПоНаименованию("Субсидия на приобретение семенного материала под посев зерновых и кормовых культур"));
		МассивНазначений.Добавить(Справочники.НазначениеЦелевыхСредств.НайтиПоНаименованию("Фин.обеспечение части затрат на приобретение мин.удобрений и средств защиты растений"));
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.ЦелевоеФинансированиеИзБюджета);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НазначениеЦелевыхСредств);
		Запрос.УстановитьПараметр("Субконто1",     МассивНазначений);      
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();  
		
		ИтогоКоличество = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки.ПоказательОтчета 	= ПоказательСубсидияНаПоддержкуЗерноводства;
			СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
			СтруктураСтроки.ЕдиницаИзмерения    = ТысячаРублей;
			СтруктураСтроки.ДатаНачала          = ДатаНачала;
			СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
			СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Получено'");
			
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, Выборка.СуммаОборотДт/1000, Истина);
			ИтогоСумма = ИтогоСумма + Выборка.СуммаОборотДт/1000;
		КонецЦикла;
		
		//////////////////
		/// КОРМОЗАГОТОВКА
		//////////////////
		СтруктураСправочника = ОписаниеСправочников.Получить("Кормозаготовка"); 
		
		НоменклатурныеГруппы = СтруктураСправочника.НоменклатурныеГруппы;
		Продукты 			 = СтруктураСправочника.Продукты;
		Культуры 			 = СтруктураСправочника.Культуры;
		СтруктурыПосева 	 = СтруктураСправочника.СтруктурыПосева;
		
		ГруппаКормозаготовка  = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Кормозаготовка",,, Объект.Шаблон);
		
		// ПОСЕВНАЯ ПЛОЩАДЬ
		ПоказательПосевнаяПлощадь = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Посевная площадь",,ГруппаКормозаготовка);
		Гектар = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("059");
		Выборка = Справочники.схСтруктураПосевныхПлощадей.Выбрать();
		ИтогоПлощадь = 0;
		
		Пока Выборка.Следующий() Цикл
			
			Если Выборка.ЭтоГруппа Или Выборка.ПометкаУдаления Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтруктурыПосева.Найти(Выборка.Ссылка) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			СтруктураСтроки.ПоказательОтчета 	 = ПоказательПосевнаяПлощадь;
			СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
			СтруктураСтроки.ЕдиницаИзмерения    = Гектар;
			СтруктураСтроки.ДатаНачала          = Дата(Выборка.Год, 1, 1);
			СтруктураСтроки.ДатаОкончания       = Дата(Выборка.Год, 12, 31, 23, 59, 59);
			
			КультураСтрока = Строка(Выборка.Культура);
			НГСтрока       = Строка(Выборка.НоменклатурнаяГруппа);
			Если ВРег(КультураСтрока) = ВРег("Сено") Или ВРег(НГСтрока) = ВРег("Сено") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Сено'");
			ИначеЕсли ВРег(КультураСтрока) = ВРег("Сенаж") Или ВРег(НГСтрока) = ВРег("Сенаж") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Сенаж'");
			ИначеЕсли ВРег(КультураСтрока) = ВРег("Силос") Или ВРег(НГСтрока) = ВРег("Силос") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Силос'");
			Иначе
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Прочие'");
			КонецЕсли;	
			
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, Выборка.ПлощадьПоля, Истина);
			ИтогоПлощадь = ИтогоПлощадь + Выборка.ПлощадьПоля;
		КонецЦикла;
		СтруктураСтроки.ДопПараметр = НСтр("ru = 'Итого'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоПлощадь, Ложь);
			
		// ВаЛОВОЙ СБОР УРОЖАЯ
		ПоказательВаловыйСборУрожая = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Валовой сбор урожая",,ГруппаКормозаготовка);
		Центнер = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("206");
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	схВыпускПродукцииСПоляПродукция.Номенклатура КАК Продукция,
		|	схВыпускПродукцииСПоляПродукция.Количество КАК Количество,
		|	схВыпускПродукцииСПоляПродукция.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	схВыпускПродукцииСПоляПродукция.Ссылка.Дата КАК Дата
		|ИЗ
		|	Документ.схВыпускПродукцииСПоля.Продукция КАК схВыпускПродукцииСПоляПродукция
		|ГДЕ
		|	схВыпускПродукцииСПоляПродукция.Ссылка.Организация = &Организация
		|	И схВыпускПродукцииСПоляПродукция.Ссылка.Проведен
		|	И схВыпускПродукцииСПоляПродукция.Ссылка.ПодразделениеЗатрат = &ПодразделениеЗатрат
		|	И схВыпускПродукцииСПоляПродукция.Ссылка.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания";
		
		Запрос.УстановитьПараметр("Организация",         Объект.Организация);
		Запрос.УстановитьПараметр("ПодразделениеЗатрат", ПодразделениеКормозаготовка);
		Запрос.УстановитьПараметр("ДатаОкончания",       ДатаОкончания);
		Запрос.УстановитьПараметр("ДатаНачала",          ДатаНачала);
		
		РезультатЗапроса = Запрос.Выполнить();                 
		
		Выборка = РезультатЗапроса.Выбрать();
		
		КоличествоИтого = 0;
		Пока Выборка.Следующий() Цикл                  
			Если Продукты.Найти(Выборка.Продукция) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			СтруктураСтроки.ПоказательОтчета 	= ПоказательВаловыйСборУрожая;
			СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
			СтруктураСтроки.ЕдиницаИзмерения    = Центнер;
			СтруктураСтроки.ДатаНачала          = ДатаНачала;
			СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
			
			ПродукцияСтрока = Строка(Выборка.Продукция);
			Если ВРег(ПродукцияСтрока) = ВРег("Сено") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Сено'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Сенаж") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Сенаж'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Силос") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Силос'");
			Иначе
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Прочие'");
			КонецЕсли;	
			
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, Выборка.Количество, Истина);
			КоличествоИтого = КоличествоИтого + Выборка.Количество;
		КонецЦикла;
		СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Итого'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, КоличествоИтого, Ложь);
		
		// СЕБЕСТОИМОСТЬ ЕДИНИЦЫ УРОЖАЯ
		Если НачальнаяТаблица.Колонки.Найти("Количество") = Неопределено Тогда
			НачальнаяТаблица.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		КонецЕсли;
		Если НачальнаяТаблица.Колонки.Найти("Сумма") = Неопределено Тогда
			НачальнаяТаблица.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
		КонецЕсли;
		ПоказательСебестоимостьЕдиницыУрожая = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Себестоимость единицы урожая",,ГруппаКормозаготовка);
		Рубль = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("383");
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Выпуск.Продукция КАК Продукция,
		|	Выпуск.КоличествоОборот КАК КоличествоВыпуска
		|ПОМЕСТИТЬ Выпуск
		|ИЗ
		|	РегистрНакопления.ВыпускПродукцииУслуг.Обороты(
		|			&НачалоПериода,
		|			&КонецПериода,
		|			,
		|			Организация = &Организация
		|				И Продукция В ИЕРАРХИИ (&Корма)) КАК Выпуск
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Себестоимость.Продукция КАК Продукция,
		|	СУММА(Себестоимость.Сумма) КАК Сумма,
		|	СУММА(Себестоимость.СуммаПР) КАК СуммаПР,
		|	СУММА(Себестоимость.СуммаНУ) КАК СуммаНУ,
		|	СУММА(Себестоимость.СуммаВР) КАК СуммаВР
		|ПОМЕСТИТЬ Материалы
		|ИЗ
		|	РегистрСведений.РасчетКалькуляцииСебестоимости КАК Себестоимость
		|ГДЕ
		|	Себестоимость.Активность
		|	И Себестоимость.Продукция В ИЕРАРХИИ(&Корма)
		|	И Себестоимость.Организация = &Организация
		|	И Себестоимость.ПериодРасчета >= &НачалоПериода
		|	И Себестоимость.ПериодРасчета <= &КонецПериода
		|
		|СГРУППИРОВАТЬ ПО
		|	Себестоимость.Продукция
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Выпуск.Продукция КАК Продукция,
		|	Выпуск.КоличествоВыпуска КАК Количество,
		|	isnull(Материалы.Сумма, 0) КАК Сумма,
		|	isnull(Материалы.СуммаПР, 0) КАК СуммаПР,
		|	isnull(Материалы.СуммаНУ, 0) КАК СуммаНУ,
		|	isnull(Материалы.СуммаВР, 0) КАК СуммаВР
		|ИЗ
		|	Выпуск КАК Выпуск
		|		ЛЕВОЕ СОЕДИНЕНИЕ Материалы КАК Материалы
		|		ПО Выпуск.Продукция = Материалы.Продукция";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("Корма",         Справочники.Номенклатура.НайтиПоНаименованию("Корма собственные"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоКоличество = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			
			Если Продукты.Найти(Выборка.Продукция) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			СтруктураСтроки.ПоказательОтчета 	= ПоказательСебестоимостьЕдиницыУрожая;
			СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
			СтруктураСтроки.ЕдиницаИзмерения    = Рубль;
			СтруктураСтроки.ДатаНачала          = ДатаНачала;
			СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
			
			ПродукцияСтрока = Строка(Выборка.Продукция);
			Если ВРег(ПродукцияСтрока) = ВРег("Сено") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Сено'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Сенаж") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Сенаж'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Силос") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Силос'");
			Иначе
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Прочие'");
			КонецЕсли;	
			
			СтрокаТаблицы = ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, 0, Истина);
			
			СтрокаТаблицы.Количество = СтрокаТаблицы.Количество + Выборка.Количество;
			СтрокаТаблицы.Сумма = СтрокаТаблицы.Сумма + Выборка.Сумма;
			ИтогоКоличество = ИтогоКоличество + Выборка.Количество;
			ИтогоСумма = ИтогоСумма + Выборка.Сумма;
		КонецЦикла;
		
		СтруктураСтроки.ДопПараметр = НСтр("ru = 'Итого'");;
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ?(ИтогоКоличество = 0, 0, ИтогоСумма/ИтогоКоличество), Ложь);
		
		Для Каждого СтрокаПродукт Из СтрРазделить(НСтр("ru = 'Сено,Сенаж,Силос,Прочие'"), ",") Цикл
			СтруктураСтроки.ДопПараметр  = СтрокаПродукт;
			СтрокиТаблицы = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
			Если СтрокиТаблицы.Количество() > 0 Тогда
				СтрокаТаблицы = СтрокиТаблицы[0];
				СтрокаТаблицы.РезультатВычисления = ?(СтрокаТаблицы.Количество = 0, 0, СтрокаТаблицы.Сумма/СтрокаТаблицы.Количество);
			КонецЕсли;	
		КонецЦикла;	
		
		// ПОТРЕБЛЕНО НА СОБСТВЕННЫЕ НУЖДЫ
		ПоказательПотребленоНаСобственныеНужды = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Потреблено на собственные нужды",,ГруппаКормозаготовка);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
					   |	ХозрасчетныйОбороты.КоличествоОборотКт КАК КоличествоОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И Субконто1 В ИЕРАРХИИ (&Корма),
		               |			КорСчет В (&КорСчета),
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.КормаСобственные);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		КорСчета = Новый Массив;
		КорСчета.Добавить(ПланыСчетов.Хозрасчетный.Животноводство);
		КорСчета.Добавить(ПланыСчетов.Хозрасчетный.ГужевойТранспорт);
		Запрос.УстановитьПараметр("КорСчета",      КорСчета);      
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("Корма",         Справочники.Номенклатура.НайтиПоНаименованию("Корма собственные"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();
		
		ИтогоКоличество = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки.ПоказательОтчета 	= ПоказательПотребленоНаСобственныеНужды;
			СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
			СтруктураСтроки.ЕдиницаИзмерения    = Центнер;
			СтруктураСтроки.ДатаНачала          = ДатаНачала;
			СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
			
			Если Продукты.Найти(Выборка.Продукция) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			ПродукцияСтрока = Строка(Выборка.Продукция);
			Если ВРег(ПродукцияСтрока) = ВРег("Сено") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Сено'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Сенаж") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Сенаж'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Силос") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Силос'");
			Иначе
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Прочие'");
			КонецЕсли;	
			
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, Выборка.КоличествоОборотКт, Истина);
			ИтогоКоличество = ИтогоКоличество + Выборка.КоличествоОборотКт;
		КонецЦикла;
		
		СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Итого'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоКоличество, Ложь);
		
		// РЕАЛИЗОВАНО ПРОДУКЦИИ КОРМОЗАГОТОВКИ
		ПоказательРеализованоПродукцииКормозаготовки = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Реализовано продукции кормозаготовки",,ГруппаКормозаготовка);
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.КорСчет КАК КорСчет,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт,
					   |	ХозрасчетныйОбороты.КоличествоОборотКт КАК КоличествоОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |				И Субконто1 В ИЕРАРХИИ (&Корма),
		               |			КорСчет В ИЕРАРХИИ (&КорСчет),
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.КормаСобственные);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
		Запрос.УстановитьПараметр("КорСчет",       ПланыСчетов.Хозрасчетный.СебестоимостьПродаж);      
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		Запрос.УстановитьПараметр("Корма",         Справочники.Номенклатура.НайтиПоНаименованию("Корма собственные"));
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();  
		
		ИтогоКоличество = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки.ПоказательОтчета 	= ПоказательРеализованоПродукцииКормозаготовки;
			СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
			СтруктураСтроки.ЕдиницаИзмерения    = Центнер;
			СтруктураСтроки.ДатаНачала          = ДатаНачала;
			СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
			
			Если Продукты.Найти(Выборка.Продукция) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			ПродукцияСтрока = Строка(Выборка.Продукция);
			Если ВРег(ПродукцияСтрока) = ВРег("Сено") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Сено'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Сенаж") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Сенаж'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Силос") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Силос'");
			Иначе
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Прочие'");
			КонецЕсли;	
			
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, Выборка.КоличествоОборотКт, Истина);
			ИтогоКоличество = ИтогоКоличество + Выборка.КоличествоОборотКт;
		КонецЦикла;
		
		СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Итого'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоКоличество, Ложь);
		
		
		// ВЫРУЧКА ОТ РЕАЛИЗАЦИИ ПРОДУКЦИИ КОРМОЗАГОТОВКИ
		ПоказательВыручкаРеализацииКормозаготовки = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Выручка от реализации продукции кормозаготовки",,ГруппаКормозаготовка);
		ТысячаРублей = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("384");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.ВыручкаСельХоз);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();  
		
		ИтогоКоличество = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки.ПоказательОтчета 	= ПоказательВыручкаРеализацииКормозаготовки;
			СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
			СтруктураСтроки.ЕдиницаИзмерения    = ТысячаРублей;
			СтруктураСтроки.ДатаНачала          = ДатаНачала;
			СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
			
			Если НоменклатурныеГруппы.Найти(Выборка.Продукция) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			ПродукцияСтрока = Строка(Выборка.Продукция);
			Если ВРег(ПродукцияСтрока) = ВРег("Сено") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Сено'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Сенаж") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Сенаж'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Силос") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Силос'");
			Иначе
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Прочие'");
			КонецЕсли;	
			
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, Выборка.СуммаОборотКт/1000, Истина);
			ИтогоСумма = ИтогоСумма + Выборка.СуммаОборотКт/1000;
		КонецЦикла;
		
		СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Итого'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоСумма, Ложь);
		
		// СЕМЕСТОИМОСТЬ ПРОДАЖ ПРОДУКЦИИ КОРМОЗАГОТОВКИ
		НГСено      = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Сено");
		НГСенаж     = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Сенаж");
		НГСилос     = Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Силос");
		ПоказательСебестоимостьПродажКормозаготовки = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Себестоимость продаж продукции кормозаготовки",,ГруппаКормозаготовка);
		ТысячаРублей = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду("384");
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		               |	ХозрасчетныйОбороты.Счет КАК Счет,
		               |	ХозрасчетныйОбороты.Субконто1 КАК Продукция,
		               |	ХозрасчетныйОбороты.СуммаОборотДт КАК СуммаОборотДт,
		               |	ХозрасчетныйОбороты.СуммаОборотКт КАК СуммаОборотКт
		               |ИЗ
		               |	РегистрБухгалтерии.Хозрасчетный.Обороты(
		               |			&НачалоПериода,
		               |			&КонецПериода,
		               |			Период,
		               |			Счет = &Счет,
		               |			&ВидСубконто,
		               |			Организация = &Организация
		               |			) КАК ХозрасчетныйОбороты";
		
		Запрос.УстановитьПараметр("КонецПериода",  ДатаОкончания);
		Запрос.УстановитьПараметр("НачалоПериода", ДатаНачала);
		Запрос.УстановитьПараметр("Счет",          ПланыСчетов.Хозрасчетный.СебестоимостьПродажСельХоз);
		Запрос.УстановитьПараметр("ВидСубконто",   ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.НоменклатурныеГруппы);
		Запрос.УстановитьПараметр("Организация",   Объект.Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Выборка = РезультатЗапроса.Выбрать();  
		
		ИтогоКоличество = 0;
		ИтогоСумма = 0;
		Пока Выборка.Следующий() Цикл
			СтруктураСтроки.ПоказательОтчета 	= ПоказательСебестоимостьПродажКормозаготовки;
			СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
			СтруктураСтроки.ЕдиницаИзмерения    = ТысячаРублей;
			СтруктураСтроки.ДатаНачала          = ДатаНачала;
			СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
			
			Если НоменклатурныеГруппы.Найти(Выборка.Продукция) = Неопределено Тогда
				Продолжить;
			КонецЕсли;	
			
			ПродукцияСтрока = Строка(Выборка.Продукция);
			Если ВРег(ПродукцияСтрока) = ВРег("Сено") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Сено'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Сенаж") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Сенаж'");
			ИначеЕсли ВРег(ПродукцияСтрока) = ВРег("Силос") Тогда
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Силос'");
			Иначе
				СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Прочие'");
			КонецЕсли;	
			
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, Выборка.СуммаОборотДт/1000, Истина);
			ИтогоСумма = ИтогоСумма + Выборка.СуммаОборотДт/1000;
		КонецЦикла;
		
		СтруктураСтроки.ДопПараметр  = НСтр("ru = 'Итого'");
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, ИтогоСумма, Ложь);
		
		
		// ПРИБЫЛЬ/УБЫТОК ОТ ПРОДАЖИ ПРОДУКЦИИ КОРМОЗАГОТОВКИ
		// Выручка - Себестоимость
		ЕАС_ЗаполнениеОтчетов.ФорматированиеЗначенийВычислений(НачальнаяТаблица, СтруктураСтроки, ВыборкаПолейШаблона);
		
		ПоказательПрибыльУбытокПродажиКормозаготовки = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Прибыль/убыток от продажи продукции кормозаготовки",,ГруппаКормозаготовка);
		СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
		СтруктураСтроки.ЕдиницаИзмерения    = ТысячаРублей;
		СтруктураСтроки.ДатаНачала          = ДатаНачала;
		СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
		Для Каждого ДопПараметр Из СтрРазделить(НСтр("ru = 'Сено,Сенаж,Силос,Прочие,Итого'"),",") Цикл
			СтруктураСтроки.ПоказательОтчета = ПоказательВыручкаРеализацииКормозаготовки;
			СтруктураСтроки.ДопПараметр      = ДопПараметр;
			СтрокиВыручки = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
			
			СтруктураСтроки.ПоказательОтчета = ПоказательСебестоимостьПродажКормозаготовки;
			СтрокиСебестоимость = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
			
			СтруктураСтроки.ПоказательОтчета = ПоказательПрибыльУбытокПродажиКормозаготовки;
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, 0, Истина);
			
			Если СтрокиВыручки.Количество() > 0 Тогда
				ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СтрокиВыручки[0].РезультатВычисления, Истина);
			КонецЕсли;
			Если СтрокиСебестоимость.Количество() > 0 Тогда
				ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, -СтрокиСебестоимость[0].РезультатВычисления, Истина);
			КонецЕсли;
		КонецЦикла;
		
		
		//////////////////////////
		/// ФИНАНСОВЫЙ РЕЗУЛЬТАТ
		//////////////////////////
		ГруппаФинансовыйРезультат = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Финансовый результат",,,Объект.Шаблон);
		
		ПоказательФинРезультатВыручкаОтРеализации = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Выручка от реализации",,ГруппаФинансовыйРезультат);
		СтруктураСтроки.Источник            = Перечисления.ЕАС_ВидыИсточниковДанных.Факт;
		СтруктураСтроки.ЕдиницаИзмерения    = ТысячаРублей;
		СтруктураСтроки.ДатаНачала          = ДатаНачала;
		СтруктураСтроки.ДатаОкончания       = ДатаОкончания;
		СтруктураСтроки.ДопПараметр  		= НСтр("ru = 'Итого'");
		
		СтруктураСтроки.ПоказательОтчета = ПоказательВыручкаРеализацииЗерноводства;
		СтрокиЗерноводства = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
		
		СтруктураСтроки.ПоказательОтчета = ПоказательВыручкаРеализацииКормозаготовки;
		СтрокиКормозаготовки = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
		
		СтруктураСтроки.ПоказательОтчета = ПоказательФинРезультатВыручкаОтРеализации;
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, 0, Истина);
		
		Если СтрокиЗерноводства.Количество() > 0 Тогда
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СтрокиЗерноводства[0].РезультатВычисления, Истина);
		КонецЕсли;
		Если СтрокиКормозаготовки.Количество() > 0 Тогда
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СтрокиКормозаготовки[0].РезультатВычисления, Истина);
		КонецЕсли;
		
		// себестоимость
		ПоказательФинРезультатСебестоимостьПродаж = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Себестоимость продаж",,ГруппаФинансовыйРезультат);
		СтруктураСтроки.ПоказательОтчета = ПоказательСебестоимостьПродажЗерноводства;
		СтрокиЗерноводства = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
		
		СтруктураСтроки.ПоказательОтчета = ПоказательСебестоимостьПродажКормозаготовки;
		СтрокиКормозаготовки = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
		
		СтруктураСтроки.ПоказательОтчета = ПоказательФинРезультатСебестоимостьПродаж;
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, 0, Истина);
		
		Если СтрокиЗерноводства.Количество() > 0 Тогда
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СтрокиЗерноводства[0].РезультатВычисления, Истина);
		КонецЕсли;
		Если СтрокиКормозаготовки.Количество() > 0 Тогда
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СтрокиКормозаготовки[0].РезультатВычисления, Истина);
		КонецЕсли;
		
		// прибыль/убыток
		ПоказательФинРезультатПрибыльУбыток = Справочники.ЕАС_ПоказателиОтчетов.НайтиПоНаименованию("Прибыль/убыток",,ГруппаФинансовыйРезультат);
		СтруктураСтроки.ПоказательОтчета = ПоказательПрибыльУбытокПродажиЗерноводства;
		СтрокиЗерноводства = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
		
		СтруктураСтроки.ПоказательОтчета = ПоказательПрибыльУбытокПродажиКормозаготовки;
		СтрокиКормозаготовки = НачальнаяТаблица.НайтиСтроки(СтруктураСтроки);
		
		СтруктураСтроки.ПоказательОтчета = ПоказательФинРезультатПрибыльУбыток;
		ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, 0, Истина);
		
		Если СтрокиЗерноводства.Количество() > 0 Тогда
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СтрокиЗерноводства[0].РезультатВычисления, Истина);
		КонецЕсли;
		Если СтрокиКормозаготовки.Количество() > 0 Тогда
			ЕАС_ЗаполнениеОтчетов.УстановитьРезультатВычисления(НачальнаяТаблица, СтруктураСтроки, СтрокиКормозаготовки[0].РезультатВычисления, Истина);
		КонецЕсли;
	КонецЦикла; // НомерГода	
КонецПроцедуры		
		
#КонецОбласти	